<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TF-Lite 示例应用</title>
      <link href="/2020/11/24/TF-Lite-%E7%A4%BA%E4%BE%8B%E5%BA%94%E7%94%A8/"/>
      <url>/2020/11/24/TF-Lite-%E7%A4%BA%E4%BE%8B%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>目标检测ios示例<br>使用CocoaPods来下载TF Lite 库<br>CocoaPods简介:</p><p>CocoaPods是一个用Ruby写的、负责管理iOS项目中第三方开源库的工具，CocoaPods能让我们集中的、统一管理第三方开源库，为我们节省设置和更新第三方开源库的时间。</p><pre><code>CocoaPods安装参考 https://www.jianshu.com/p/f43b5964f582升级Ruby    ruby -v 查看ruby版本升级Ruby环境，首先需要安装rvm    curl -L get.rvm.io | bash -s stable         报错 Failed to connect to raw.githubusercontent.com port 443: Connection refused error: Error: 7，        解决方法 https://blog.csdn.net/txl910514/article/details/105880125sudo gem update --system  更新gemsudo gem install cocoapodscd lite/examples/object_detection/ios/ pod install在xcode中打开 ObjectDetection.xcworkspace但是得注册Apple Developer 用于开启ios设备的权限</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>存储</title>
      <link href="/2020/11/10/%E5%AD%98%E5%82%A8/"/>
      <url>/2020/11/10/%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>参考<br><a href="https://www.cnblogs.com/debruyne/p/9177314.html" target="_blank" rel="noopener">https://www.cnblogs.com/debruyne/p/9177314.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>货币背后的秘密</title>
      <link href="/2020/10/13/%E8%B4%A7%E5%B8%81%E8%83%8C%E5%90%8E%E7%9A%84%E7%A7%98%E5%AF%86/"/>
      <url>/2020/10/13/%E8%B4%A7%E5%B8%81%E8%83%8C%E5%90%8E%E7%9A%84%E7%A7%98%E5%AF%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android基础用户界面</title>
      <link href="/2020/10/09/Android%E5%9F%BA%E7%A1%80%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/"/>
      <url>/2020/10/09/Android%E5%9F%BA%E7%A1%80%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux显示乱码问题</title>
      <link href="/2020/09/30/Linux%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/30/Linux%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java教程</title>
      <link href="/2020/09/03/Java%E6%95%99%E7%A8%8B/"/>
      <url>/2020/09/03/Java%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2020/08/28/%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/28/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>十大经典排序算法 动图演示<br><a href="https://www.cnblogs.com/onepixel/p/7674659.html" target="_blank" rel="noopener">https://www.cnblogs.com/onepixel/p/7674659.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N皇后</title>
      <link href="/2020/08/25/N%E7%9A%87%E5%90%8E/"/>
      <url>/2020/08/25/N%E7%9A%87%E5%90%8E/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2020/08/24/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2020/08/24/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>负数的二进制表示<br>十进制5在计算机中表示为 int类型占4个字节<br>00000000 00000000 00000000 00000101<br>那么-5在计算机中应该怎么表示呢？</p><p>在计算机中，<em>负数以其正值的补码形式表达</em><br>什么叫补码呢？这得从原码，反码说起。<br>原码：一个整数，按照绝对值大小转换成的二进制数，称为原码。<br>比如 00000000 00000000 00000000 00000101 是 5的 原码。<br>反码：将二进制数按位取反，所得的新二进制数称为原二进制数的反码。<br>原码 00000000 00000000 00000000 00000101<br>反码 11111111 11111111 11111111 11111010<br>补码 11111111 11111111 11111111 11111011<br>补码： 反码+1称为补码<br>所以， -5在计算机中表达为：<br>11111111 11111111 11111111 11111011<br>转换为16进制： 0xFFFFFFFB</p><p>-1在计算机中如何表示<br>1的原码<br>00000000 00000000 00000000 00000001<br>1的反码<br>11111111 11111111 11111111 11111110<br>补码<br>11111111 11111111 11111111 11111111<br>可见， -1在计算机里用二进制表达就是全1<br>16进制为：0xFFFFFF</p><p>内容来自：<a href="https://www.jianshu.com/p/6c518e7b4690" target="_blank" rel="noopener">https://www.jianshu.com/p/6c518e7b4690</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2020/08/22/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2020/08/22/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>class UF {<br>    // 记录连通分量<br>    private int count<br>    // 节点x的父节点是parent[x]<br>    private int[] parent;<br>    // 新增一个数组来记录树的“重量” 为了避免造成树的不平衡<br>    private int[] size;</p><pre><code>/*构造函数， n为图的节点总数*/public UF(int n) {    // 一开始互不相通    this.count = n; // 连通分量的个数        // 父节点指针指向自己    parent = new int[n];    // 最初每棵树只有一个节点    // 重量应该初始化为1    size = new int[n];    for (int i=0; i&lt;n; i++) {        parent[i] = i;        size[i] = 1;  // 初始状态的节点个数为1    }}/* 将p和q连接 */public void union(int p, int q) {    int rootP = find(p);    int rootQ = find(q);    if (rootP == rootQ)         return;    // 将两棵树合并为一颗    // 小树接到大树下面，较平衡    if (size[rootP] &gt; size[rootQ]) {        parent[rootQ] = rootP;        size[rootP] += size[rootQ];    } else {        parent[rootP] = rootQ;        size[rootQ] += rootP;     }    count--; // 两个分量合二为一 }/* 返回某个节点x的根节点 */private int find(int x) {    // 根节点parent[x] == x    while (parent[x] != x) {        // 进行路径压缩        parent[x] = parent[parent[x]];        x = parent[x];    }    return x;}/* 判断p和q是否连通*/public boolean connected(int p, int q) {    int rootP = find(p);    int rootQ = find(q);    return rootP == rootQ;}/* 返回图中有多少个联通分量 */public int count() {    return count;}</code></pre><p>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minimax-Algorithm</title>
      <link href="/2020/08/14/Minimax-Algorithm/"/>
      <url>/2020/08/14/Minimax-Algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="—"><a href="#—" class="headerlink" title="—"></a>—</h1><h1 id="title-Minimax-Algorithm"><a href="#title-Minimax-Algorithm" class="headerlink" title="title: Minimax Algorithm"></a>title: Minimax Algorithm</h1><h1 id="date-2020-08-14-20-03-12"><a href="#date-2020-08-14-20-03-12" class="headerlink" title="date: 2020-08-14 20:03:12"></a>date: 2020-08-14 20:03:12</h1><h1 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h1><h1 id="categories-Algorithm"><a href="#categories-Algorithm" class="headerlink" title="categories: Algorithm"></a>categories: Algorithm</h1><h1 id="—-1"><a href="#—-1" class="headerlink" title="—"></a>—</h1><p><a href="https://segmentfault.com/a/1190000013527949" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013527949</a><br>const maxDepth = 4;<br>let counter = 1;</p><p>const dataTree = [<br>                    [<br>                        [<br>                            [3, 17], [2, 12]<br>                        ],<br>                        [<br>                            [15], [25, 0]<br>                        ]<br>                    ],<br>                    [<br>                        [<br>                            [2, 5], [3]<br>                        ]<br>                        [<br>                            [2, 14]<br>                        ]<br>                    ]<br>                ];</p><p>constructor(data, type, depth) {<br>    this.data = data;<br>    this.type = type; // 区分此节点的种类是max或min<br>    this.depth = depth;<br>}</p><p>function changeType(type) {<br>    return type === ‘max’ ? ‘min’ : ‘max’;<br>}</p><p>score() {<br>    // 到达了最大深度后，此时的data是数组最内层的数字<br>    if (this.depth &gt;= 4) {<br>        return this.data;<br>    }    </p><pre><code>// 对于max节点，返回的是子节点中的最大值if (this.type === &apos;max&apos;) {    let maxScore = -1000;    for (let i=0; i &lt; this.data.length; i++) {        const d = this.data[i];        // 生成新的节点，子节点的type会和父节点不同        const childNode = new Node(d, changeType(this.type), this.depth+1);        // 递归获取其分数        const childScore = childNode.score();        if (childScore &gt; maxScore) {            maxScore = childScore;        }    }    return maxScore;}// 对于min节点，返回的是子节点中的最小值if (this.type === &apos;min&apos;) {    let minScore = 1000;    for (let i=0; i &lt; this.data.length; i++) {        const d = this.data[i];        // 生成新的节点，子节点的type会和父节点不同        const childNode = new Node(d, changeType(this.type), this.depth+1);        // 递归获取其分数        const childScore = childNode.score();        if (childScore &gt; minScore) {            minScore = childScore;        }    }    return minScore;}</code></pre><p>}</p><p>const testNode = new Node(dataTree, ‘max’, 0);<br>console.log(testNode.score());</p><hr><p>Alpha-beta 剪枝算法的实现<br>是minimax的改进</p><p>class Node{<br>    constructor(data, type, depth) {<br>        this.data = data;<br>        this.type = type; // 区分此节点的种类是max或min<br>        this.depth = depth;</p><pre><code>    this.alpha = alpha || -Infinity;    this.beta = beta || Infinity;}score() {}</code></pre><p>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AI</title>
      <link href="/2020/08/13/AI/"/>
      <url>/2020/08/13/AI/</url>
      
        <content type="html"><![CDATA[<p>project1数独<br>约束传播和搜索</p><p>project2 Build an AI that play games<br>minimax alpha-beta pruning<br>吃豆人<br>BFS DFS A*<br>最优路径问题</p><p>project3 马尔可夫模型 手语字符转化为对应的英文文本</p><p>Navigation 导航 A*<br>智能体 动态交互<br>棋盘的状态 搜索树 剪枝<br>对抗搜索 Mini-Max</p><p>Monty Hall三门问题<br>switch<br>先验概率 P(A) = P(B) = P(C) = 1/3<br>后验概率 P(B|open_B) = 0<br>贝叶斯定理<br>P(C|open_B) = P(open_B|C) * P(C) / P(open_B)  = 1 * 1/3 / 1/2 = 2/3</p><p>智能的定义是什么？<br>Agent, Enviroment, State<br>智能体：是指会根据给定目标采取行动，最大化其预期效用的事物<br>Perception, Action, Cognition<br>感知： 智能体通过感知环境属性与环境互动<br>行为：输出行为通常会改变环境的状态<br>认知：智能体决定采取什么行动的过程，取决于感知输入，这个过程称为认知<br>我们对AI的大部分讨论都会集中在认知上，特别是推理和决策<br>有限最优性</p><p>Conda与pip相似，不同之处在于可用的软件包集中于数据科学，而pip则用于一般用途。<br><code>conda create -n env_name list of packages</code><br><code>conda create -n data python=3.6 numpy pandas</code><br><code>source activate env_name</code><br><code>conda list</code> 查看安装的packages<br><code>source deactivate</code></p><p>保存和加载环境<br><code>conda env export &gt; enviroment.yaml</code><br>write the exported text to a YAML file</p><p>从保存的环境文件创建行动环境<br><code>conda env create -f enviroment.yaml</code><br>create a new enviroment with the same listed in enviroment.yaml</p><p>移除环境<br><code>conda env remove -n env_name</code></p><p>windows配置Git环境变量<br><a href="https://blog.csdn.net/C_chuxin/article/details/87880332" target="_blank" rel="noopener">https://blog.csdn.net/C_chuxin/article/details/87880332</a></p><hr><p>搜索、逻辑、规划<br>概率、贝叶斯网络<br>Main topics:</p><ol><li>Adversarial Search</li><li>Minimax Algorithm</li><li>Alpha-Beta pruning</li><li>Evaluation Functions</li><li>Isolation Functions</li><li>Multi-player, probabilistic Games</li></ol>]]></content>
      
      
      <categories>
          
          <category> Udacity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML &amp; CSS</title>
      <link href="/2020/08/11/HTML-CSS/"/>
      <url>/2020/08/11/HTML-CSS/</url>
      
        <content type="html"><![CDATA[<p>树形结构<br>h1元素 <h1>This is a heading.</h1></p><p>This is a paragraph.</p>>标签 <h1> <p> <span> <image><p>This is a paragraph.</p><span>span1</span> 一行<span>span2</span><p>命令行启动sublime<br>MAC 打开终端输入下面的命令并回车即可<br>ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl</p><p>添加完系统变量之后，接下来你就可以在命令行里面利用subl命令直接使用Sublime Text了：<br>subl file : 使用Sublime Text打开file文件<br>subl folder : 使用Sublime Text打开folder文件夹<br>subl . : 使用Sublime Text当前文件夹</p><p>Chrome<br>cmd + o 打开文件<br>Cmd + R 刷新文件</p><p><tag>Content</tag><br>递归嵌套</p><div>    <h1>Article Title</h1>    <p>Paragraph of text.</p> </div><p>前往 MDN HTML 元素参考 中文网站 ，寻找你要使用的元素。<br>MDN (Mozilla Developer Network)<br>cmd + f 寻找关键字<br><b> bold 粗体 </b><br><em> emphasis 着重 </em></p><p>HTML文档模版<br><!DOCTYPE html> 描述HTML的类型</p><html>    <head>        Meta information goes here!        描述有关站点的元信息(例如标题)，         并提供网页正确渲染和交互，所需的脚本和样式表链接    <meta name="generator" content="Hexo 4.2.0"></head>    <body>        Content goes here!        描述用户将看到的网页上的实际内容    </body></html>   <!DOCTYPE html><html>    <head>        <meta charset="utf-8">        <title>This is a title</title>    </head>    <body>        <h1>Hello!</h1>    </body></html><p>按钮标签<br><button>一个按钮！</button></p><p>标题标签<br><!DOCTYPE html></p><html>    <head></head>    <body>        <p>            <h1>HomePage</h1>            <h2>Welcome to my website</h2>            <h3>about me</h3>            <h4>more</h4>            <span>SpaceX launched the Falcom Havey</span>        </p>    </body></html><p>列表标签<br><!DOCTYPE html></p><html>    <head>    </head>       <body>        <p>            <ul>                <li>HTML</li>                <li>CSS</li>                <li>JavaScript</li>            </ul>        </p>    </body></html>   <p>HTML树<br><!DOCTYPE html></p><html>    <head></head>       <body>        <h1>树形结构</h1>        <div>            <p>你可以使用树形结构整理HTML文件，使它们更具有条理</p>            <p>这不仅有利于可读性，还与CSS、JavaScript的风格和编程形式保持了一致</p>        </div>     </body></html><p>使用链接元素创建超链接<br><a href="www.google.com">谷歌</a><br>href代表“引用” </p><p>使用img元素创建图像 图像不需要结束标签<br><img src="http://somewensite.com/image.jpg" alt="short description"></p><!DOCTYPE html><html lang="en">    <head></head>    <body>        <p>            这里是一大段有关 Udacity 的文字。很酷！接下来是图像！        </p>        <img src="http://udacity.github.io/fend/images/udacity.png", alt="Udacity Logo">    </body></html><p>路径指南<br>绝对路径 ：世界上任何人都可以使用地址 1600 Pennsylvania Ave NW, Washington DC, USA 20006 找到美国白宫。街道地址是指向某地点的绝对路径。<br>相对路径 ：但如果你就在艾森豪行政大楼， 那么你还可以使用“隔壁大楼”来查找白宫。 “隔壁大楼”需要依赖当前位置，因此是一个相对路径。</p><p>本地文件<br>外部文件</p><p>本地路径<br>外部路径<br>相对路径</p><p>负责为你提供网站文件的计算机称为 <em>服务器</em><br>服务器具有任何人都可以访问的外部路径，这也正是 Web 的工作原理。<br>不同的网站只不过是不同的文件集合。每个网站其实都只是具有外部地址的服务器（或多个服务器）， 我们称外部地址为 URL</p><p>图片描述<br><!DOCTYPE html></p><html lang="en">    <head></head>    <body>        <figure>            <img src="redwoods_state_park.jpg" alt="redwoods">            <figcaption> readwoods_state_park.jpg</figcaption>        </figure>        <p> 斯托特纪念森林，杰迪戴亚·史密斯红木州立公园，2011 年，由 Chmee2 拍摄。GFDL 或 CC BY-SA 3.0，来自 Wikimedia Commons -             <a href="https://commons.wikimedia.org/wiki/File%3AStout_Memorial_Grove_in_Jedediah_Smith_Redwoods_State_Park_in_2011_(22).JPG" target="_blank" rel="noopener">source</a>        </p>    <script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"log":false,"model":{"jsonPath":"/live2dw/assets/wanko.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"react":{"opacity":0.7}});</script></body></html>]]></content>
      
      
      <categories>
          
          <category> Udacity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html, css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉</title>
      <link href="/2020/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
      <url>/2020/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Udacity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度碎片</title>
      <link href="/2020/08/08/%E6%B7%B1%E5%BA%A6%E7%A2%8E%E7%89%87/"/>
      <url>/2020/08/08/%E6%B7%B1%E5%BA%A6%E7%A2%8E%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>np.squeeze() 去除单维度的条目</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UdacityDL</title>
      <link href="/2020/07/29/UdacityDL/"/>
      <url>/2020/07/29/UdacityDL/</url>
      
        <content type="html"><![CDATA[<h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h3><p>什么是Anaconda ？<br>Anaconda实际上是conda，Python和150多个科学软件包及其依赖项附带的软件发行版。应用程序conda是程序包和环境管理器。</p><p>安装Anaconda<br>Anaconda is available for Windows, Mac OS X, and Linux. You can find the installers and installation instructions at <a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">https://www.anaconda.com/download/</a>.</p><p>安装后，您将自动进入默认的conda环境，并安装了所有软件包，您可以通过在终端中输入<code>conda list</code>来检查自己的安装。</p><p>包管理<br>conda install numpy</p><p>创建环境<br>conda create -n env_name list of packages    (-n for name)<br>conda create -n my_env numpy<br>指定python版本<br>conda create -n py38 python=3.8</p><p>进入环境<br>source activate my_env  (OSX/Linux)<br>activate my_env  (Windows)</p><p>conda create -n data py36 python=3.6 numpy pandas</p><p>保存和加载环境<br><code>conda env export &gt; enviroment.yaml</code>  保存环境到yaml文件<br>conda env export<br><code>conda env create -f environment.yaml</code> 从yaml文件创建环境</p><p>环境列表<br>conda env list</p><p>移除环境<br>conda env remove -n env_name</p><h3 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h3>]]></content>
      
      
      <categories>
          
          <category> Udacity </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>广度优先搜索</title>
      <link href="/2020/07/28/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2020/07/28/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p> BFS代码模版<br> def BFS(graph, start, end):<br>     queue = []<br>     queue.append([start])<br>     visited.add(start)</p><pre><code>while queue:    node = queue.pop()    visited.add(node)    process(node)    nodes = generate_related_nodes(node)    queue.push(nodes)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度优先搜索</title>
      <link href="/2020/07/28/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
      <url>/2020/07/28/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>示例代码<br>python<br>class TreeNode:<br>    def <strong>init</strong>(self, val):<br>        self.val = val;<br>        self.left, self.right = None, None</p><p>C++<br>Struct TreeNode {<br>    int val;<br>    TreeNode * left;<br>    TreeNode * right;<br>    TreeNode(int x) : val(x),left(NULL),right(NULL) {}<br>}</p><p>Java<br>public class TreeNode {<br>    public int val;<br>    public TreeNode left, right;</p><pre><code>public TreeNode(int val) {    this.val = val;    this.left = null;    this.right = null;}</code></pre><p>}</p><p>二叉树dsf 示例代码<br>def dsf(node):<br>    if node in visited:<br>        # already visited<br>        return</p><pre><code>visited.add(node)# process current node# ... # logic heredfs(node.left)dfs(node.right)</code></pre><p>多叉树dsf 示例代码<br>visited = set()<br>def dfs(node, visited):<br>    # terminator<br>    if node in visited:<br>        # already visited<br>        return </p><pre><code>visited.add(node);# process current node here# 遍历所有子节点for next_node in node.children:    if not next_node in visited:        dfs(next_node, visited)</code></pre><p>DFS非递归写法<br>def DFS(self, tree):<br>    if tree.root is None:<br>        return []</p><pre><code>visited, stack = [], [tree.root]while stack:    node = stack.pop()    visited.add(node)    process(node)    nodes = generate_related_nodes(node)    stack.push(nodes)# other processing work</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>递归代码模版</title>
      <link href="/2020/07/23/%E9%80%92%E5%BD%92%E4%BB%A3%E7%A0%81%E6%A8%A1%E7%89%88/"/>
      <url>/2020/07/23/%E9%80%92%E5%BD%92%E4%BB%A3%E7%A0%81%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># python 递归模版</span><br><span class="line">def recursion(level, param1, param2, ...):</span><br><span class="line"># recursion terminator</span><br><span class="line">if level &gt; MAX_LEVEL:</span><br><span class="line">process_result</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line"># process logic in current level</span><br><span class="line">process(level, data...)</span><br><span class="line"></span><br><span class="line"># drill down</span><br><span class="line">self.recursion(level+1, p1, ...)</span><br><span class="line"></span><br><span class="line"># reverse the current level status if needed</span><br></pre></td></tr></table></figure><p>// Java递归模版<br>public class recursionTemplate {<br>    public void recur(int level, int param) {</p><pre><code>    // terminator    if (level &gt; MAX_LEVEL) {        // process result        return;    }    // process current logic    process(level, param);    // drill down    recur(level: level + 1, newParam);    // restore current status}</code></pre><p>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分治代码模版</title>
      <link href="/2020/07/23/%E5%88%86%E6%B2%BB%E4%BB%A3%E7%A0%81%E6%A8%A1%E7%89%88/"/>
      <url>/2020/07/23/%E5%88%86%E6%B2%BB%E4%BB%A3%E7%A0%81%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>def divede_conquer(problem, param1, param2, …):<br>    # recursion terminator<br>    if problem is None:<br>        print_result<br>        return</p><pre><code># prepare datadata = prepare_data(problem)subproblems = split_problem(problem, data)# conquer subproblemssubresult1 = self.divede_conquer(subproblems[0], p1, ...)subresult2 = self.divede_conquer(subproblems[1], p1, ...)subresult3 = self.divede_conquer(subproblems[2], p1, ...)...# process and generate the final resultresult = process_result(subresult1, subresult2, subresult3, ...)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高效能人士的七个习惯</title>
      <link href="/2020/07/21/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/"/>
      <url>/2020/07/21/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/</url>
      
        <content type="html"><![CDATA[<p>第一部分 思维方式与原则<br>    第一章 由内而外的造就自己<br>        付诸行动</p><pre><code>    Q1:你是否曾做出推测时发现自己的判断过于匆忙？请对这种经历加以描述。    在青岛的时候，没有很好地去体谅对方，对你一会不热情，你就以为人家不爱你，冲动地做出了一些傻事，    Q2:你当时做出的推测是什么？    因为是最后一晚在一起，为什么要抗拒我，这样的观点是错误的，两个人在一起可以做很多其他的有意义的事情    Q3:想一下你做过的其他推测。本周你将对其中某一项采取什么行动？    （一）检验你的思维方式    你曾经到过其他国家，或本国的其他地区吗？你觉得哪些事情是陌生的奇怪的？    最近的一次是青岛，当地人    人们的行为是否如你预期？你对他们的行为有何看法？    回想你的旅游经历，你认为当地人对你的看法如何？你是否认为他们对你的看法与你对他们的看法可能很类似？    如果你有机会在旅途中认识当地人，你对他们的看法或推测会有什么改变？    （二）转换你的思维方式    回想一下通往你的工作场所或你家的不同路径。是否有些路径比其他的更复杂？是否有时其中一条比其他的更方便？为什么方便，为什么不方便    你是否发现过一条你以前不知道的新路径？走不同的路径的新鲜感如何？    现在想一下你与他人打交道的方式。与他们打交道是否有好几种方式？你有可能尝试哪些新的方式？    （三）影响你生活的五个原则    请列出影响你的日常生活的五个原则。它们以怎样的方式影响你？它们是以积极还是消极的方式影响你的生活？    1.    2.    3.    4.    5.第二章 七个行动概论    付诸行动</code></pre><p>第二部分 个人领域的成功：从依赖到独立<br>    第三章 习惯一： 积极主动——个人愿景的原则<br>        付诸行动</p><pre><code>第四章 习惯二： 以始为终——自我领导的原则    付诸行动第五章 习惯三： 要事第一——自我管理的原则    付诸行动</code></pre><p>第三部分 公众领域的成功：从独立到互赖<br>    第六章 人际关系的本质<br>        付诸行动</p><pre><code>第七章 习惯四：双赢思维——人际领导的原则    付诸行动第八章 习惯五：知彼解己——移情沟通的原则    付诸行动第九章 习惯六：统合综效——创造性合作的原则    付诸行动</code></pre><p>第四部分 自我提升和完善<br>    第十章 习惯七：不断更新——平衡点自我提升法则<br>        付诸行动</p><pre><code>第十一章 再论由内而外造就自己    付诸行动</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门</title>
      <link href="/2020/07/21/Java%E5%85%A5%E9%97%A8/"/>
      <url>/2020/07/21/Java%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Java Dvelopment Kit (JDK)<br>    1. Java Runtime Enviroment (JRE)<br>        Includes the code behind all the variable types and built-in functions (ex. the println() function)<br>        包含所有变量类型和Java内置函数涉及的代码 比如println()函数</p><pre><code>    which allows Java code to run on any platform!    It also includes a Java Virtual Machine (JVM).    Runtime Enviroment 还含有一个Java虚拟机 该虚拟机可以从网上下载 可允许Java代码在任何计算机上运行 无论是Windows、Mac还是其它操作系统都可     很多电脑本身就装有Runtime Enviroment 因为计算机需要这个工具来运行网页里的Java应用程序    但是要开发我们自己的程序和Java应用，我们需要第二个工具 也就是Java编译器2. a Java compiler (javac)    A compiler is a special type of program that translates programing language code into code that a computer can excute    Program code --in--&gt; Compiler ---out--&gt; Translated code    Java Code -&gt; Compiler(javac) -&gt; Bytecode -&gt; Java Virtual Machine -&gt; Machine Code </code></pre><p>在编辑器中编写Java代码<br>    subl HelloWorld.java<br>    // 保存文件时 文件名应与类名相同<br>    public class HelloWorld {<br>        // class 在Java中是用来存放函数和代码并关联程序的<br>        public static void main(String[] args) {<br>            System.out.println(“Hello world!”);<br>        }<br>    }</p><p>在terminal中运行Java代码的流程<br>    1. javac 代码文件名.java<br>        对代码进行编译 生成class文件<br>    2. java 文件名<br>        执行java程序<br>    在编辑器修改代码后 需要重新编译</p><p>Java集成开发环境 Intellij<br>Debug<br>    断点<br>    step over<br>    resume<br>    step into<br>    step out</p><p>自动生成注释</p><p><a href="https://blog.csdn.net/qq_34581118/article/details/78409782" target="_blank" rel="noopener">https://blog.csdn.net/qq_34581118/article/details/78409782</a></p><p>ctrl + j 查看方法文档</p><p>static 表示它不需要对象就能运行，因此计算机在创建任何对象之前，会从该方法开始<br>构造方法：是特殊的方法，负责为该类创建和初始化对象<br>    1. 构造方法没有任何返回类型<br>    2. 构造方法的名称和类本身的名称一样</p><p>默认构造函数<br>参数化构造函数<br>class Game{<br>    int score;</p><pre><code>// Default constructorGame() {    score = 0;}// Constructor by starting score valueGame(int startingScore) {    score = startingScore;}</code></pre><p>}</p><p>// 访问构造方法<br>new关键字 要创建特定类的对象，你需要使用 new 关键字，后面是要使用的构造方法<br>Game tetris = new Game(); // 调用默认构造函数<br>Game darts = new Game(100); // 调用带参构造函数</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大学作业提交流程</title>
      <link href="/2020/07/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E5%AD%A6%E4%BD%9C%E4%B8%9A%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/07/19/%E6%9E%81%E5%AE%A2%E5%A4%A7%E5%AD%A6%E4%BD%9C%E4%B8%9A%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><figcaption><span>add .</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;week0X assignment&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>将对应的链接复制到原始仓库的issue</p><p>#学号:G20200343090088<br>#姓名:张文胜<br>#班级:12期2班<br>#语言:java<br>#作业&amp;总结链接: <a href="https://github.com/VincentCheungKokomo/algorithm012/tree/master/Week_02" target="_blank" rel="noopener">https://github.com/VincentCheungKokomo/algorithm012/tree/master/Week_02</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刻意练习</title>
      <link href="/2020/07/08/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/07/08/%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>刻意练习<br>    ——从新手到大师<br>我们认为杰出的人都是因为天赋，而那些“天才”其实是来自正确的刻意训练</p><p>天才的真相<br>    a. 莫扎特：音乐家父亲的刻意练习<br>    b. 帕格尼尼： 断弦演奏来自事前的练习和策划<br>    c. 训练比智商更重要<br>有目的的练习<br>    a. 定义明确的具体的目标<br>    b. 专注、反馈、走出舒适区<br>    c. 遇到瓶颈：做不同的事；强化动机</p><p>大脑的适应能力<br>    a. 通过适应性训练打造你的“最强大脑”<br>    b. 让大脑步出舒适区： 合理挑战<br>    c. 练习改变大脑结构</p><p>心理表征<br>    a. 心理表征： 思考的心理结构或是下意识<br>    b. 刻意练习能够创建心理表征</p><p>黄金标准<br>    a. 最杰出的人，训练时间最长<br>    b. 运用刻意练习的原则<br>        * 尽可能地运用刻意练习提升技能<br>        * 确定行业的标杆人物及与他人的差别<br>        * 找到优秀导师<br>    c. 1万小时法则：刻板，混淆概念</p><p>在工作中运用刻意练习<br>    a. 拒绝错误思想：我做不到；熟能生巧； 刻苦就够<br>    b. 干中学，传授技能而非知识</p><p>在生活中运用刻意练习原则<br>    a. 找到好导师<br>    b. 投入、专注<br>    c. 3F方法：Focus; Feedback; Fix it</p><p>成为杰出人物的四个阶段<br>    1.产生兴趣<br>    2.变得认真<br>    3.全力投入<br>    4.开拓创新</p>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编码技巧</title>
      <link href="/2020/07/07/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/07/07/%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<p>快捷键<br><code>fn + delete</code> 删除光标右侧<br><code>cmd+ left/right</code> 行头行尾<br><code>option + left/right</code> 光标按单词切分<br><code>option + delete</code> 删除单词<br><code>shift + command + right</code> 选中整行（光标在行头时）<br>IDE<br>Tab<br>commnad + e<br>Top tips for <IDE-name></p><p>自顶向下的编程方式<br>《clean code》</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18 睡眠，触摸，爱情的重要性</title>
      <link href="/2020/07/03/18-%E7%9D%A1%E7%9C%A0%EF%BC%8C%E8%A7%A6%E6%91%B8%EF%BC%8C%E7%88%B1%E6%83%85%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
      <url>/2020/07/03/18-%E7%9D%A1%E7%9C%A0%EF%BC%8C%E8%A7%A6%E6%91%B8%EF%BC%8C%E7%88%B1%E6%83%85%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>把睡眠视作投资<br>提高身体免疫力<br>幸福觉 智力觉<br>8h/d</p><p>5hugs/d</p><p>一周至少4次 每次至少30分钟运动<br>正念 深呼吸 15分钟</p><p>适量的时间与对方相处<br>accept nature<br>no perfect love<br>真爱是存在于不完美的人之间的</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“贝多芬”</title>
      <link href="/2020/07/01/%E2%80%9C%E8%B4%9D%E5%A4%9A%E8%8A%AC%E2%80%9D/"/>
      <url>/2020/07/01/%E2%80%9C%E8%B4%9D%E5%A4%9A%E8%8A%AC%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>但当所有事情都失去 而你觉得你很孤单的时候 这些经常发生在你身上如果你听贝多芬的音乐 其实你从不孤单<br>1770-1827<br>德国 波恩<br>父亲挣钱的工具<br>海顿 记忆学习<br>崇拜莫扎特<br>1787 16岁 去维也纳拜访莫扎特<br>母亲是他最好的朋友<br>父亲酗酒<br>贝多芬音乐的本质就是活力 什么时候大声 什么时候轻柔<br>革命时代<br>1792 去维也纳跟海顿学习<br>音乐家的殿堂 维也纳<br>比海顿的更加幽默 纤细 更加粗旷 巨大汹涌的能量<br>贝多芬改变了钢琴的演奏风格<br>感情的严肃性<br>贝多芬的翻盘表现在奏鸣曲的C小调上 煽动性<br>席勒描写悲剧艺术不只是简单地描述人们的苦难 但企图反抗向苦难屈服 奏鸣曲13乐章<br>即兴创作比赛<br>第18乐章的弦乐四重奏 28岁 开始更系统地组织他的音乐构想 速写本 记下灵感<br>1796 患病 听力逐渐消退 28岁<br>我曾经想结束我的生命 只是我的艺术把我拉回来了<br>看样子我似乎不可能离开这个世界 知道我创作出所有我能感觉到的包括我在内<br>Eroica Symphony<br>旋律和素材是如此简单 每一块砖都很简单 但建筑物却好极了<br>和谐的发展 旋律的发展 富有节奏的<br>起初是献给拿破仑 但拿破仑选择加冕为国王时 贝多芬变得很愤怒<br>Eroica就是关于贝多芬自己<br>1801 月光献给伯爵夫人<br>1804 约瑟芬 从我的危机到我的耳聋 你是我生命的眷恋 我要证明你对我的价值 于是贝多芬的创作有了一个巨大的发展期<br>工作惯例 跟人生活混乱不稳定<br>第一首乐曲 D调小提琴协奏曲<br>第五交响曲 那不是音乐，是政治煽动，它就像一种思想的表现：我们生活的方式不好，并不好“  人们听到第五交响曲会把它跟反对法国的斗争联系起来，又讽刺意味在里面，在第二次世界大战时，它成为法国抵抗德国压迫的标志，这就是一些关于音乐广泛性的说法 “Voyage”号把贝多芬的第五交响曲作为信息的一部分，因为它是人类伟大的成就 我们努力工作，我们创造东西，我们生气，沮丧，我们尝试并努力寻找我们快乐的方式 尽管我们尽了最大的努力但我们经常失败 我们到了绝望的境地 下一步是什么 我们现在要做什么 突然我们看到了一丝希望 你几乎不敢相信这是是真的 然后 足够确定 我们在那儿<br>1802第一次在维也纳公演</p><p>1812年7月5号从布拉格到了泰普利兹 在那三天写了一份热情洋溢的情书<br>“我的天使，我的一切，我的自己”<br>“除了牺牲，我们能为我们的爱情努力吗，不要求任何东西？你能改变你不属于我，我不属于他的事实吗？我心里有很多东西要对你说，尽管我在床上，我的思想已经和你一起，我的至爱”<br>“哦 继续爱我，不要误会对你最忠实的爱你的心，永远是你的，我的，我们的“</p><p>Fidelio 爱 说话和行动的自由</p><p>43岁 侄子的监护权</p><p>Adagio 一种独特的方式展现悲情色彩<br>生命最后的9年完全失聪 靠笔记本和人们交流 在这本对话录里的闲谈 辱骂 幽默 显示出贝多芬的最后的日子并不是与世隔绝而悲惨的</p><p>1816 第九交响曲 初稿 9年后完成 600多页手稿《Ode to Joy》</p><p>贝多芬和歌手们有特别的关系 他是他们为因音乐结合在一起的一群人 在第九交响曲的最后非常清楚 就像是他的话由热门一同唱出来  这就是贝多芬<br>他们经音乐的力量发生变化 </p><p>如果要定义贝多芬在今天的重要性 我会从个人开始 贝多芬的音乐会让人上瘾 他一直带着你 他要求的轻度可能是你不愿意放弃的 </p><p>一个人可能从音乐中集中精神 一个人可能因放松而喜欢音乐 但你必须回到这里来</p><p>对我，他是最好的作曲家  因为我觉得他想和你分享他的生活 比其他作曲家更多 他也准备显现出生活的阴暗部分 因为这样 你会对生活认识越多 它是多个角度的 在最悲伤的时候还是有希望的 在充满希望的时候也还是有悲伤 你可以从很多不同的角度来看</p><p>就像是一面镜子 你被告知：“这就是你，这就是我” 只有伟大的艺术家才能做到 其他的作品使你跳舞，是你跳跃，微笑和哭泣，但伟大的作品就像是镜子，人们可以从中看到自己</p><p>贝多芬给我印象最深的是 这是我在音乐里听过的难以忘怀的慷慨激昂 这个男人的一生充满艰难和困苦，充满矛盾，回到他最重要的作品，和最值得称道的时刻，来到一个充满感激，愉悦的结果，就好像在说：“life is good，it’s all worth it”</p><p>Of all the things Beethoven that impress me the most, it’s the remarkable generosity that i hear at in music<br>this men had a stommy and difficult life, a lot conflict in it, returns again and again his most important peice and most telling moments to a kind of deep grateful, himlike autorence , just like saying:“life is good，it’s all worth it”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《我为何而生》</title>
      <link href="/2020/06/22/%E3%80%8A%E6%88%91%E4%B8%BA%E4%BD%95%E8%80%8C%E7%94%9F%E3%80%8B/"/>
      <url>/2020/06/22/%E3%80%8A%E6%88%91%E4%B8%BA%E4%BD%95%E8%80%8C%E7%94%9F%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>《我为何而生》<br>罗素</p><p>有三种情感，单纯而强烈，支配着我的一生：对爱情的渴望，对知识的追求，以及对人类苦难不可遏制的同情。这些感情如阵阵巨风，挟卷着我在漂泊不定的路途中东飘西荡，飞越苦闷的汪洋大海，直抵绝望的边缘。</p><p>我之所以追寻爱情，首先，爱情使人心醉神迷，如此美妙的感觉，以致使我时常为了体验几小时爱的喜悦，而宁愿献出生命中其它一切；其次，爱情可以解除孤独，身历那种可怕孤寂的人的战栗意识，会穿过世界的边缘，直望入冰冷死寂的无底深渊；最后，置身于爱的结合，我在一个神秘缩影中看到了圣贤与诗人们所预想的天堂。这正是我所追寻的，尽管它对于人类的生活或许太过美好，却是我的最终发现。</p><p>我也以同样的热情追求知识。我渴望理解人类的心灵，渴望知道星辰为何闪耀，我还试图领略毕达哥拉斯关于哪些数字在变迁之上保持着永恒的智慧。在这一方面，我取得了一点成果，但并不算多。</p><p>爱情与知识，尽其可能，引领着我通往天堂；然而怜悯总是把我带回现实。那些痛苦的呼唤在我内心深处回响。饥饿中的孩子，被压迫和折磨的人们，给子女造成重担的无助老人，以及孤独、贫穷和痛苦的整个世界，都是对人类理想生活的嘲讽。我渴望能减少这些不幸，但无能为力，这也是我的痛苦。</p><p>这就是我的一生。我发现人生是值得的；而且如果能够再有一次这样的机会，我会欣然接受。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MQTTS接入指南</title>
      <link href="/2020/06/15/MQTTS%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97/"/>
      <url>/2020/06/15/MQTTS%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="创建产品"><a href="#创建产品" class="headerlink" title="创建产品"></a>创建产品</h1><p>产品 - 设备 - 数据流 - 数据点<br>产品ID: 354482<br>access_key: qeRqUb9LL2CuMKC5l5ErRr8mn60L4l5i35DCby+FPfA=<br>设备名称: drone3<br>drone3 key: bmUyIBGYHenGjGlByIkr9eGQC5W4qeZdEyTV9mIujFg=<br>token: 由python代码生成<br>version=2018-10-31&amp;res=products%2F354482%2Fdevices%2Fdrone3&amp;et=1592213387&amp;method=sha1&amp;sign=HlpuhfMQ8gih6YYI7mIUf8n%2BU8E%3D<br>MQTTS客户端 MQTT.fx</p><h1 id="数据点上传"><a href="#数据点上传" class="headerlink" title="数据点上传"></a>数据点上传</h1><p>topic:<br>    <code>$sys/{pid}/{device-name}/dp/post/json</code><br>    <code>$sys/354482/drone3/dp/post/json</code><br>    $sys/354482/drone3/dp/post/json/accepted<br>    $sys/354482/drone3/dp/post/json/rejected</p><h1 id="命令下发topic"><a href="#命令下发topic" class="headerlink" title="命令下发topic"></a>命令下发topic</h1><pre><code>`$sys/{pid}/{device-name}/cmd/#`  #表示与命令相关$sys/354482/drone3/cmd/#</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode</title>
      <link href="/2020/06/10/%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/06/10/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5" alt="Alt text" title="optional title"><br>Alt text：图片的Alt标签，用来描述图片的关键词，可以不写。<br>最初的本意是当图片因为某种原因不能被显示时而出现的替代文字，后来又被用于SEO，<br>可以方便搜索引擎根据Alt text里面的关键词搜索到图片。<br>图片链接：可以是图片的本地地址或者是网址。<br>“optional title”：鼠标悬置于图片上会出现的标题文字，可以不写。</p><p><img src="https://api2.mubu.com/v3/document_image/d32a5a67-816d-4f29-898d-99ae13c45d20-6168853.jpg" alt="链表逆置"></p><p>1-a 链表逆置 leetcode 206 Reverse Linked List<br>步骤：</p><ol><li>备份 head-&gt;next</li><li>修改 head-&gt;next</li><li>移动head与new_head</li></ol><h1 id="include-lt-stdio-h-gt"><a href="#include-lt-stdio-h-gt" class="headerlink" title="include &lt;stdio.h&gt;"></a>include &lt;stdio.h&gt;</h1><p>struct ListNode{<br>    int val; // 存储元素的数据域<br>    ListNode* next; // 存储下一个结点地址的指针域<br>    ListNode(int x) : val(x), next(NULL) {}<br>};</p><p>class Solution{<br>public:<br>    ListNode* reverseList(ListNode* head){<br>        ListNode* new_head = NULL; // 指向❤新链表头结点的指针<br>        while(head){<br>            // 1 备份 head-&gt;next<br>            ListNode* next = head-&gt;next;<br>            // 2.修改 head-&gt;next<br>            head-&gt;next = new_head;<br>            // 3. 移动head与new_head<br>            new_head = head;<br>            head = next; //遍历链表<br>        }<br>        return new_head; // 返回新链表头结点<br>    }<br>};</p><p>int main(){<br>    // 生存链表节点<br>    ListNode a(1);<br>    ListNode b(2);<br>    ListNode c(3);<br>    ListNode d(4);<br>    ListNode e(5);<br>    // 将节点简单的链接， 进行测试<br>    // 无需构造简单的链表操作（插入、删除）<br>    a.next = &b;<br>    b.next = &c;<br>    c.next = &d;<br>    d.next = &e;</p><pre><code>Solution solve;ListNode* head  = &amp;a;printf(&quot;Before reverse:\n&quot;);while (head){    printf(&quot;%d &quot;, head-&gt;val);    head = head-&gt;next;}printf(&quot;\n&quot;);head = solve.reverseList(&amp;a);printf(&quot;After reverse:\n&quot;);while (head){    printf(&quot;%d &quot;, head-&gt;val);    head = head-&gt;next;}return 0;</code></pre><p>}</p><p>// 链表逆序-b LeetCode 92 Reverse Linked List 2</p><p>class Solution{<br>public:<br>    ListNode* reverseBetween(ListNode* head, int m, int n){<br>        //计算需要逆置的节点个数<br>        int change_len = n - m + 1;<br>        // step1 找到开始逆置的节点， 记录该节点前驱和该节点<br>        // 初始化开始逆置的节点的前驱<br>        ListNode* pre_head = NULL;<br>        // 最终转换后的链表头结点，非特殊情况即为head<br>        ListNode* result = head;<br>        while(head &amp;&amp; –m){<br>            //将head向前移动m-1个位置<br>            pre_head = head; //记录head的前驱<br>            head = head-&gt;next;<br>        }</p><pre><code>    //将modify_list_tail指向当前的head，即逆置后的链表尾    ListNode * modeify_list_tail = head;    ListNode * new_head = NULL;    // step2 从head开始，逆置change_len = n-m+1个节点    while(head &amp;&amp; change_len){        // 逆置change_len个节点        ListNode * next = head-&gt;next;        head-&gt;next = new_head;        new_head = head;        head = next;        change_len--; //每完成一个节点逆置，change_len--    }    // step3 将pre_head与new_head连接，modeify_list_tail与head相连    modeify_list_tail-&gt;next = head; //连接逆置后的链表尾与逆置段的后一节点    if(pre_head){    // 如果pre_head不空，说明不是从第一个节点开始逆置的m&gt;1        pre_head-&gt;next = new_head; // 将逆置链表开始的节点前驱与逆置后的头结点连接    }else{        result = new_head; // 如果pre_head为空，说明m==1从第一个节点开始逆置，结果即为逆置后的头结点    }    return result;}</code></pre><p>};</p><p>例2: 求两个链表第一个的交点 160<br>方法1的必备知识（set的使用）</p><p>#include <set> //STL set的使用</p><p>// O(nlogn)或O(n)的方法判断两数组是否有相同元素<br>int main(){<br>    std::set<int> test_set;  //STL set<br>    const int A_LEN = 7;<br>    const int B_LEN = 8;</p><pre><code>int a[A_LEN] = [5, 1, 4, 8, 10, 1, 3];int b[B_LEN] = [2, 7, 6, 3, 1, 6, 0, 1];for(int i=0; i &lt; A_LEN; i++){    test_set.insert(a[i]); // 将数组a的元素插入set}for(int i=0; i &lt; B_LEN; i++){    if(test_set.find(b[i]) != test_set.end()){        printf(&quot;b[%d] = %d in array A.&quot;, i, b[i]);    }}return 0;</code></pre><p>}</p><p>// 方法1 O(nlogn) O(n)<br>class Solution{<br>public:<br>    ListNode <em>getIntersectionNode(ListNode *headA, ListNode *headB){<br>        std::set&lt;ListNode</em>&gt; node_set; // 设置查找集合node_set<br>        while(headA){<br>            node_set.insert(headA); // 将链表A中的节点地址插入node_set<br>            headA = headA-&gt;next; // 遍历链表A<br>        }<br>        while(headB){<br>            if(node_set.find(headB) != node_set.end()){<br>                return headB; // 当在headB中找到第一个出现在node_set中的节点时<br>            }<br>            headB = headB-&gt;next; // 遍历链表B<br>        }<br>        return NULL;<br>    }<br>};</p><p>// 方法2 O(n) O(1)<br>// 遍历链表， 计算链表长度<br>int get_list_length(ListNode *head){<br>    int len = 0;<br>    while(head){<br>        len++;<br>        head = head-&gt;next;<br>    }<br>    return len;<br>}</p><p>ListNode* forward_long_list(int long_len, int short_len, ListNode* head){<br>    int delta = long_len - short_len;<br>    // 将指针向前移动至多出节点个数后面的位置<br>    while(head &amp;&amp; delta){<br>        head = head-&gt;next;<br>        delta–;<br>    }<br>    return head; // 返回两链表等长时， 较长链表指针所指的位置<br>}</p><p>class Solution{<br>public:<br>    ListNode* getIntersectionNode(ListNode* headA, ListNode *headB){<br>        //求A, B两个链表长度<br>        int list_A_len = get_list_length(headA);<br>        int list_B_len = get_list_length(headB);<br>        if(list_A_len &gt; list_B_len){<br>            // 如果链表A长， 移动headA到对应位置<br>            headA = forward_long_list(list_A_len, list_B_len, headA);<br>        }else{// 如果链表B长， 移动headB到对应位置<br>            headB = forward_long_list(list_B_len, list_A_len, headB);<br>        }<br>        while(headA &amp;&amp; headB){<br>            if(headA == headB){ // 当两指针指向了同一个节点时，说明找到了<br>                return headA;<br>            }<br>            headA = headA-&gt;next;<br>            headB = headB-&gt;next;<br>        }<br>        return NULL;<br>    }<br>};</p><p>int main(){</p><pre><code>ListNode a1(1);ListNode a2(2);ListNode b1(3);ListNode b2(4);ListNode b3(5);ListNode c1(6);ListNode c2(7);ListNode c3(8);a1.next = &amp;a2;a2.next = &amp;c1;b1.next = &amp;b2;b2.next = &amp;b3;b3.next = &amp;c1;c1.next = &amp;c2;c2.next = &amp;c3;Solution solve;ListNode* result = solve.getIntersectionNode(&amp;a1, &amp;b1);printf(&quot;%d\n&quot;, result-&gt;val);return 0;</code></pre><p>}</p><p>例3 链表求环 141/ 142 已知链表中可能存在环，若有环返回环起始节点，否则返回NULL<br>思路一<br>class Solution{<br>public:<br>    ListNode* detectCycle(ListNode* head){<br>        std::set&lt;ListNode *&gt; node_set; //设置node_set<br>        while(head){// 遍历链表<br>            if(node_set.find(head) != node_set.end()){<br>                // 如果在node_set已经出现了<br>                return head;<br>            }<br>            node_set.insert(head); // 将节点插入node_set<br>            head = head-&gt;next;<br>        }<br>        return NULL; // 没有遇到环，则返回NULL<br>    }<br>};</p><p>思路2 快慢指针 相遇则有环 相遇节点为meet，<br>分别从head与meet以同样的速度出发，第一次相遇的节点为环开始的起点</p><p>class Solution{<br>public:<br>    ListNode* detectCycle(ListNode* head){<br>        ListNode* fast = head; // 快指针<br>        ListNode* slow = head; // 慢指针<br>        ListNode* meet = NULL; // 相遇的节点<br>        while(fast){<br>            // slow与fast先各走一步<br>            slow = slow-&gt;next;<br>            fast = fast-&gt;next;<br>            if(!fast){ // 如果fast遇到链表尾，则返回NULL<br>                return NULL;<br>            }<br>            fast = fast-&gt;next; // fast再走一步<br>            if(fast == slow){<br>                meet = fast; // fast与slow相遇，记录相遇位置<br>                break;<br>            }<br>        }</p><pre><code>    if(meet == NULL){        return NULL; // 如果没有相遇，则证明无环    }    // 分别从head与meet以同样的速度出发，第一次相遇的节点为环开始的起点    while(head &amp;&amp; meet){        if(head == meet){ //当head与meet相遇，则说明遇到环的起始位置            return head;        }        head = head-&gt;next; // head与meet每次走一步        meet = meet-&gt;next;    }    return NULL;}</code></pre><p>};</p><p>int main(){<br>    ListNode a(1);<br>    ListNode b(2);<br>    ListNode c(3);<br>    ListNode d(4);<br>    ListNode e(5);<br>    ListNode f(6);<br>    ListNode g(7);</p><pre><code>a.next = &amp;b; b.next = &amp;c;c.next = &amp;d;d.next = &amp;e;e.next = &amp;f;f.next = &amp;g;g.next = &amp;c; // 环的第一个节点Solution solve;ListNode* node = solve.detectCycle(&amp;a);if(node){    printf(&quot;%d\n&quot;, node-&gt;val);}else{    printf(&quot;NULL\n&quot;);}return 0;</code></pre><p>}</p><p>例4 链表划分 86 <em>*<br>class Solution{<br>public:<br>    ListNode</em> partition(ListNode* head, int x){<br>        // 设置两个临时的头结点<br>        ListNode less_head(0);<br>        ListNode more_head(0);<br>        // 对应指针指向这两个头结点<br>        ListNode* less_ptr = &less_head;<br>        ListNode* more_ptr = &more_head;</p><pre><code>    while(head){        if(head-&gt;val &lt; x){ // 如果节点值小于x，则将该节点插入less_ptr后            less_ptr-&gt;next = head;            less_ptr = head;        }else{ // 否则将该节点插入more_ptr后            more_ptr-&gt;next = head;            more_ptr = head;        }        head = head-&gt;next; // 遍历链表    }    less_ptr-&gt;next = more_head.next;    more_ptr-&gt;next = NULL; // 将more_ptr即链表尾节点next置空    return less_head.next; // less_head的next节点即为新链表头结点，返回}</code></pre><p>};</p><p>int main(){<br>    ListNode a(1);<br>    ListNode b(4);<br>    ListNode c(3);<br>    ListNode d(2);<br>    ListNode e(5);<br>    ListNode f(2);</p><pre><code>a.next = &amp;b; b.next = &amp;c;c.next = &amp;d;d.next = &amp;e;e.next = &amp;f;Solution solve;ListNode* head = solve.partition(&amp;a, 3);while(head){    printf(&quot;%d\n&quot;, head-&gt;val);    head = head-&gt;next;}return 0;</code></pre><p>}</p><p>例5 复杂的链表的深度拷贝 138 ***</p><p>// 必备知识<br>#include &lt;stdio.h&gt;<br>#include <map> // STL map头文件<br>struct RandomListNode{<br>    int label;<br>    RandomListNode *next, *random;<br>    RandomListNode(int x) : label(x), next(NULL), random(NULL){}<br>}</p><p>int main(){<br>    std::map&lt;RandomListNode*, int&gt; node_map; // 将节点地址映射成ID<br>    RandomListNode a(5);<br>    RandomListNode b(3);<br>    RandomListNode c(6);</p><pre><code>a.next = &amp;b;b.next = &amp;c;a.random = &amp;c;b.random = &amp;a;c.random = &amp;c;node_map[&amp;a] = 1;node_map[&amp;b] = 2;node_map[&amp;c] = 3;printf(&quot;a.random id = %d\n&quot;, node_map[a.random]);printf(&quot;b.random id = %d\n&quot;, node_map[b.random]);printf(&quot;c.random id = %d\n&quot;, node_map[c.random]);return 0;</code></pre><p>}</p><p>class Solution{<br>public:<br>    RandomListNode* copyRandomList(RandomListNode* head){<br>        std::map&lt;RandomListNode<em>, int&gt; node_map; // 地址到节点位置的map<br>        std::vector&lt;RandomListNode</em>&gt; node_vec; // 使用vector根据存储节点位置访问地址<br>        RandomListNode* ptr = head;<br>        int i = 0;<br>        while(ptr){<br>            // 将新链表节点push入node_vec，生成了新链表节点位置到地址的map<br>            node_vec.push_back(new RandomListNode(ptr-&gt;label));<br>            node_map[ptr] = i; // 记录原始链表地址至节点位置的node_map<br>            ptr = ptr-&gt;next; // 遍历链表<br>            i++;<br>        }</p><pre><code>    node_vec.push_back(0);    ptr = head;    i = 0;    // 再次遍历原始列表 连接新链表的next指针、random指针    while(ptr){        // 连接新链表指针        node_vec[i]-&gt;next = node_vec[i+1];        if(ptr-&gt;random){            int id = node_map[ptr-&gt;random]; // 根据node_map确认            node_vec[i]-&gt;random = node_vec[id]; // 原链表random指针指向的位置即id        }        ptr = ptr-&gt;next;        i++;    }    //返回是深度拷贝后的链表    // 深度拷贝：构造生存一个完全新的链表，即使将原链表毁坏，新链表可独立使用    return node_vec[0];}</code></pre><p>};</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《幸福课》</title>
      <link href="/2020/06/02/%E3%80%8A%E5%B9%B8%E7%A6%8F%E8%AF%BE%E3%80%8B/"/>
      <url>/2020/06/02/%E3%80%8A%E5%B9%B8%E7%A6%8F%E8%AF%BE%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>19 如何让爱情天长地久</p><ol><li><p>working hard 爱情需要努力耕耘<br>什么是幸福的relationship<br>不能有固定思维 威胁主观意识 finding mindset(fixed)<br>可塑性思维 培养感情 与努力有关 malleable mindset - cultivating mindset(effort)<br>现实中没有完美的爱情<br>找一个对的人的确很重要，然而对这段感情的经营则尤为重要<br>经营感情 working together, being together, spending time together, dedicating one another<br>there are conflicts in a relationship<br>解决矛盾的关键在于 拥有共同的目标<br>主动型的爱 自我认知理论 社交惯例（共进晚餐等）</p></li><li><p>将想要被认可的想法转变为想要被了解<br>be validated 被认可- be known 被了解<br>to be known rather than to be validated 被了解而不只是被认可<br>主动去了解我们的伴侣 最喜欢的酒 最喜欢的花 喜欢如何被碰触 了解他们的恐惧与欲望 什么时候应该给他们留下个人空间<br>什么时候应该与他们谈心 什么时候应该触摸他们 而这些都是需要时间的 life-long process<br>sharing the secret 当分享的时候 将为感情关系带来长期积极的效果<br>亲密时让对方真正了解你 包括那些你或你的伴侣不喜欢的事<br>感情关系的基础是被了解 做真实的自己 认同自己 认同彼此 growing together<br>坦露心声让我们更容易得到伴侣真诚的爱意。为什么呢？因为只有真诚才能够获得别人的信任，坦诚的人更容易被接纳。坦诚相待也能够让一段关系更持久，所以尽自己所能去了解自己的真实想法，并了解你的另一半吧。</p></li><li><p>允许争执的存在<br>冲突是感情中不可避免也是至关重要的组成<br>如果没有冲突 很可能意味着我们正在抑制一些东西 情感 分歧<br>也就是说我们没有互相理解 需要敞开胸怀与人分享<br>幸福推进剂 在一起做有意义有趣的事情<br>Love is in the details, it’s about knowing about the little things and the big things, it is about sharing and being known<br>细节之处见真爱 在于全面了解 在于分享 和被了解<br>抚摸 相视 共进晚餐 拥抱<br>表现出兴趣 创造爱的交流 理解对方<br>抚摸 微笑 送花<br>赞美对方 欣赏促进欣赏<br>不懂得欣赏 不会去赞美 美好的事物也会贬值<br>不要等到别人要求你去赞美 主动点 尽管是免费的<br>从总的趋势来看却又是无价的 赞美者和被赞美者都受益匪浅<br>“making” love 要拥有长久的关系 生理方面是十分重要的<br>交流很重要<br>更加关注彼此 冷静下来 理解对方 心有灵犀<br>在处理争执时如何保持理性的认知<br>对事不对人<br>己所不欲 勿施于人<br>人所不欲 勿施于己<br>感情关系的关键是培养真挚的意义深远的友情</p></li><li><p>积极观念<br>创造优点 而非单纯的发掘优点<br>benifit-creating rather than benifit-finding<br>欣赏伴侣的自律而不将其视为固执<br>欣赏伴侣的幽默感而不将其视为轻浮<br>积极幻觉<br>爱情不仅能感知潜能 还能发挥我们的潜能<br>《尽善尽美》<br>You make me want to be a better man</p></li></ol><p>21 爱情与自尊<br>在朋友身上 我寻求的不是妥协让步 不是盲目同意我的观点的人<br>我所寻找的是完美的敌人 会挑战我 会敦促我 会帮助我寻求真理的人</p><p>提问的重要性<br>questions begin a quest 提问是探求的开端<br>可以发现我们之前忽略的东西<br>提出积极的问题<br>    我的伴侣有什么是值得我感激的？<br>    我们的关系有何美妙之处，有什么进行的很顺利，<br>    最初我们怎么会走到一起的，我爱ta哪一点，有什么好的方面</p><p>我们一直在追求真相 但是当真相来敲我们门的时候 我们却说走开 我在找真相呢</p><p>主动有建设性（active construction）的回应<br>win-win<br>认同 重视对方 与对方融为一体 真诚的回应<br>螺旋上升 构建积极的动力<br>当说到好的关系 健康的关系时 是没有捷径的<br>如果你想要成功就要努力 就像人生中其它每一个方面一样<br>没有捷径 但那并不意味着 这种努力不能是令人享受的 不能是令人愉快并充满意义的<br>而当这种努力变得令人愉快并充满意义时 久而久之 它就会带来更幸福的关系 更幸福的个人<br>带来一个双赢的共存<br>存在有牺牲并且是健康的牺牲 但那并不是一种根本上基于责任感<br>或者为了他人否定自我的关系<br>我们越是独立 就越是相互依存</p><p>自尊 关于我对自己的态度<br>definition：这是在有能力迎接生活的基本挑战 并感到幸福的人生经历中形成的个性<br>为什么自尊很重要？<br>在我们所做出的所有评判中 没有哪个比我们对自己的评判更重要<br>一个人可能犯的最大的罪恶是瞧不起自己<br>高自尊带来的好处<br>    心理健康 更坚韧 更能应对困境<br>    提升情感关系<br>    自我概念就是自我命运 信念是自我实现的预言<br>    如果我认为自己有价值 相信自我 相信自己有能力 我将更有可能成功<br>        成功的两个因素<br>        1. 乐于发问 乐于学习<br>        2. 相信自己</p><pre><code>高情商 自省智商和人际交往智商幸福 相关比0.6</code></pre><p>低自尊心与焦虑相关<br>每个人都会焦虑 就像万有引力是一种物理本质 焦虑也是一种人性的本质</p><p>自尊： 意识的免疫系统 更坚韧的心理状态<br>当我们有高自尊时 我们将有更强的心理适应力<br>强壮的免疫系统不代表不生病 我们会生病 但较少生病 并恢复的比较快<br>少生病 健康才是主旋律<br>追求幸福 而不是一直逃避不幸福</p><p>潜在的因素决定心理障碍或疾病 - 自尊帮助我们理解各种情绪和行为的问题 帮助我们治疗大部分情绪和行为问题<br>不止应用于个人层面还应用于社会层面 社会疫苗</p><p>傲慢自恋不等于自尊</p><p>自尊的本质：<br>自尊不是通过空虚的心理强化获得的<br>区别于伪自尊 心理健康是一种与现实密切相关的状态<br>自尊是基于现实的 基于实际表现的 基于实际成功和实际练习的 是辛勤劳动的成果</p><p>成功的秘密：乐观 相信自己 对所做的事充满激情 最后是勤劳的工作<br>六个练习有助于培养自尊心<br>    正直 言行一致 通过行动与自己交流<br>    自我意识 “我的话很重要 我很重要” 了解自己<br>    有目标 有发自内心的追求 为人生的目标和感召生活<br>    承担责任 要想改变你的人生只有靠你自己（没有人会来）<br>    自我接受的练习 Permission to be human on a daily basis 允许自己做一个普通人<br>    自信的练习 在应该说不的时候说不 在应该说是的时候说是 坚持我们的信仰<br>这些是逐渐培养自尊的练习 同时也是自尊的产物 是一个潜在的自我强化循环</p><p>自尊悖论 成功和低自尊联系在一起<br>自尊不是来源于成功 也不是来源于社会地位或金钱</p><p>自尊的三层渐进式过程<br>           自我价值                  能力<br>1 依赖性自尊 来自他人的赞扬 认同所产生的自尊 不断在寻求自我的肯定 恐惧他人的批评 易被他人左右<br>和其他人比较 每个人都有某种程度的依赖性自尊（人性的本质）<br>2 独立性自尊 由内而发的自尊 根据自己的标准自我评估<br>不与他人比较，而是与自己比较 寻求他人的批判 不断寻求善意的敌人 那些人给ta出难题 在其探索真理的道路上助其一臂之力 因为他们想进步 他们的根本动力是他们自己的兴趣所在<br>3 绝对自尊 简单而自然地存在着的状态 不取决于他人的评价 甚至不由我自己的评价决定 足够自信 不接受任何评价的影响 并不是指漠视或者排斥他人的情感<br>当我们置身事外时，我们与他人的关系更加和谐友好 并且我们也更在乎他们 我们更同情 也更怜悯他人<br>我们尽量置身事外 我们不会因为与他人比较而感到羡慕 骄傲或自卑<br>相互决定 有时需要花上终生的时间才能培养足够强的绝对自尊 就像学习走路一样</p><p>怎样培养独立和无条件的自尊</p><p>如何提高自己自尊水平</p>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>情诗十首</title>
      <link href="/2020/05/26/%E6%83%85%E8%AF%97%E5%8D%81%E9%A6%96/"/>
      <url>/2020/05/26/%E6%83%85%E8%AF%97%E5%8D%81%E9%A6%96/</url>
      
        <content type="html"><![CDATA[<p>1.大胆向往爱情的《摽有梅》</p><p>出自《诗经.召南》</p><p>摽有梅，其实七兮。求我庶士，迨其吉兮。 </p><p>摽有梅，其实三兮。求我庶士，迨其今兮。</p><p>摽有梅，顷筐塈之。求我庶士，迨其谓之。</p><p>注释：</p><p>（1）摽（biào）：多理解为坠落。有：语助词。</p><p>（2）庶：众多。士：未婚男子。求我庶士，即有心追求我的男子。</p><p>（3）迨（dài）：趁。吉：好日子。迨其吉兮，意谓趁着好日子。</p><p>（4）倾筐：斜口浅筐，相当于簸箕。塈（jì）：取。</p><p>（5）谓：一说聚会；一说开口说话；一说归，嫁。</p><p>全诗的大意如下：</p><p>梅子纷纷落地，眼看只剩七成。有心求我的小伙子啊，切莫耽误了好时机。</p><p>梅子纷纷落地，眼看只剩三成。有心求我的小伙子啊，趁今日切莫再等。</p><p>梅子纷纷落地，收拾要用簸箕。有心求我的小伙子啊，快开口莫再迟疑。</p><p>2.苦苦思恋男神的《泽陂》<br>出自《诗经.陈风》</p><p>彼泽之陂，有蒲与荷。有美一人，伤如之何？寤寐无为，涕泗滂沱。</p><p>彼泽之陂，有蒲与蕳。有美一人，硕大且卷。寤寐无为，中心悁悁。</p><p>彼泽之陂，有蒲菡萏。有美一人，硕大且俨。寤寐无为，辗转伏枕。</p><p>注释：</p><p>（1）泽陂(bēi)：水域堤岸。</p><p>（2）蒲：香蒲，一种生长于河滩的草本植物。</p><p>（3）伤：因思念而忧伤。</p><p>（4）寤寐，醒着和睡着。</p><p>（5）涕泗：眼泪鼻涕。</p><p>（6）蕑(jiān)：兰草。</p><p>（7）卷(quán)：形容所思男子鬓发之美。</p><p>（8）中心，心中。</p><p>（9）悁(yuān)悁：忧伤愁闷的样子。</p><p>（10）菡萏：莲花。</p><p>（11）俨：庄重威严。毛传：“俨，矜庄貌。”</p><p>译文：</p><p>在那水之边，长着香蒲与荷花。有一美好的男子，令我思念而忧伤。朝思暮想没办法，令我涕泪如雨下。</p><p>在那水之边，长着香蒲与兰花。有一美好的男子，他身材高大有着鬈曲的鬓发。朝思暮想没办法，心中愁闷复忧伤。</p><p>在那水之边，长着香蒲与荷花。有一美好的男子，他有着高大得身材与威严的外表。朝思暮想没办法，辗转反侧难入眠。</p><p>3.绝美的暗恋：《越人歌》</p><p>越人歌</p><p>春秋  佚名</p><p>今夕何夕兮，搴舟中流。今日何日兮，得与王子同舟。蒙羞被好兮，不訾诟耻。心几烦而不绝兮，得知王子。山有木兮木有枝（知），心悦君兮君不知。</p><p>《越人歌》最早出自汉代刘向《说苑》（卷十一.善说篇），是春秋时期流传于楚地的一首间民诗歌，可以说是中国文学史上最早的也是最优美的楚辞体的诗歌，他和楚国的其他民间诗歌一起成为楚辞的艺术源头。</p><p>诗歌的大意如下：</p><p>今晚是怎样的一个夜晚啊，我摇着船在这水中。今晚是怎样的一个夜晚啊，我有幸与王子您同舟。我含羞感受着您的好啊，不顾诟骂和羞耻。一直仰慕着您，思虑绵延不绝啊，今天终于认识王子。那高山上树挨着树，枝连着枝，我内心爱慕眷恋着您啊，您却全然不知。</p><p>4.誓言之绝唱：《上邪》</p><p>上邪</p><p>汉代  佚名</p><p>上邪，我欲与君相知，长命无绝衰。山无陵，江水为竭。冬雷震震，夏雨雪。天地合，乃敢与君绝。</p><p>《上邪》（邪，读ye，二声）为《铙歌十八曲》之一。《铙歌十八曲》作为一个整体收集在宋郭茂倩的《乐府诗集》的《鼓吹曲辞》里。</p><p>作为一首民间情歌，这首诗给人的感觉是情感热烈、气势奔放的。诗中，女子指天为誓，说：“天啊，我愿与君相爱，此生此世，此情永不绝衰。除非巍巍山峰消失不见，滔滔江水干涸枯竭。除非冬日里雷声震震，炎炎夏日大雪纷飞。除非天地相合为一。直到这些全变为现实，我才敢与你相决绝！”这是多么感天动地的爱情誓言啊，唯有如此情辞热烈，如此庄重坚贞，才足以表达对天长地久之爱情的信仰。全诗独来短小而富于节奏感，没有多余之辞而真情毕现。</p><p>今天，当我们读到这首诗，只是感叹天长地久的爱情早已成为传说。多少我仍落花有意而你已流水无情，多少分分合合在我们身边上演，你是否仍愿意相信爱情之永恒，是否仍有一个人让你有过与他长相厮守的冲动。</p><p>5.山河日月皆为证：《菩萨蛮》</p><p>菩萨蛮</p><p>五代  佚名</p><p>枕前发尽千般愿，要休且待青山烂。水面上秤锤浮，直待黄河彻底枯。白日参辰现，北斗回南面。休即未能休，且待三更见日头。</p><p>这首词是敦煌曲子词中的一首。敦煌曲子词属唐五代民间词曲，20世纪初因敦煌莫高窟中被发现的大量五代写本而重新问世。相比文人词的深婉曲折和含蓄蕴藉，这首词读起来风格质朴、言辞直白，情感热烈，却又想象奇特，气势回环，激动人心。</p><p>从词的内容看，它与汉乐府《上邪》有着异曲同工之妙。同样是誓言，这首词更显口语化。而想象的大胆却不相上下。青山何以会坍塌，秤锤何以会浮在水面上，黄河何以会彻底枯竭？参星和辰星原本一在西一在东，各不相见，大白天又何以能同时见到它们？北斗何以会移到南面？三更天怎能见到日头？这些不可能的现象经过女子的大胆的浪漫主义的想象全都成了坚贞爱情的证言——即使前面五种情况都出现了，我们还要在一起。除非又有三更天出现日头，到那时我们再说分手的事吧。</p><p>在主人公的眼中，爱情与日月同在，与山河共存。一首明白如话的词表达了多么浪漫而美好的爱情向往。若那些天长地久的爱情都成了传说，让我们依然心存美好的愿望，好吗？</p><p>6.最无悔的爱恋：《思帝乡》</p><p>思帝乡·春日游</p><p>唐代  韦庄</p><p>春日游，杏花吹满头。陌上谁家年少足风流？</p><p>妾拟将身嫁与一生休。纵被无情弃，不能羞。</p><p>一首简短而质朴的词，却分明让人感到青春的热情扬溢，那种对恋爱自由的向往如同春色一般缤纷多姿，明亮夺目。“春日游，杏花吹满头。”将春之繁盛明媚一展眼前。是写景，却难掩饱满的情。于是对陌上少年的爱慕便呼之欲出。“陌上谁家年少，足风流。”短短九字，却让人想象限：春日陌上，繁花似锦，少男少女结伴出游。热情活泼的女主人公，被那个俊朗潇洒的少年深深地吸引，她多么想靠近他，她多么想与他相伴左右。于是，她对自己说，若能嫁给他，这一生也便无憾了。即使被他无情地抛弃，我也不觉得羞愧。</p><p>这首小词的动人之处在于：景美，人美，情美，而青春更美。大好春光，繁花簇簇，斯为景美；妙龄女子，俊朗少年，斯为人美；内心萌动，默默倾慕，斯为情美；自由奔放，坚定果敢，斯为青春之美。诸美交织，才让人读来回味无穷。</p><p>7.相思无尽的《卜算子》</p><p>卜算子</p><p>宋代  李之仪</p><p>我住长江头，君住长江尾。日日思君一不见君，共饮长江水。</p><p>此水几时休，此恨何时已。只愿君心似我心，定不负相思意。</p><p>李之仪的这首词以女子的口吻写就，有民歌的明白晓畅，又有文人词的雅致精巧，故而读来朗朗上口，又韵味深藏。词写相思，与长江之水相互映衬，可谓“一脉长江水，千里流相思”。词中，女子与所思之人同住长江边，共饮着长江之水，却因两地相隔，不得相见。长江之水，滔滔不绝，惹起无限怅惘，也成为连接两地相思的天然纽带。长江之水无穷无尽，一如女子绵绵不绝的相思。既然不得相见，只好期待“君心似我心”，情深如我，则必有相见之日，才不负我日日对着长江之水对你思念入髓。</p><p>8.最长情的告白：《长命女》</p><p>长命女</p><p>南唐  冯延巳</p><p>春日宴，绿酒一杯歌一遍。再拜陈三愿：一愿郎君千岁，二愿妾身常健，三愿如同梁上燕，岁岁长相见。</p><p>这首词虽简短，却感染力极强。词中说，春日设宴，女子为爱人斟满一杯酒，又为其唱了一首歌。歌罢，女子以礼相拜，并且对爱人表达了三个祝愿。三个祝愿既说到爱人，又说到自己，而最终落脚到一点：愿你我如同梁上的燕子，年年相伴，岁岁相见。前两个祝愿都是为第三个祝愿做铺垫。从词中女子的情态，可见二人以礼相待，相敬如宾，而三个祝愿又是情深似海，绵绵不息。人常说“陪伴是最长情的告白”，词中女子的三个祝愿都是为了能够相见、陪伴，可见情之深，意之切。</p><p>9.决绝又深情的《白头吟》</p><p>白头吟</p><p>西汉 卓文君</p><p>皑如山上雪，皎若云间月。闻君有两意，故来相决绝。</p><p>今日斗酒会，明旦沟水头。躞蹀御沟上，沟水东西流。</p><p>凄凄复凄凄，嫁娶不须啼。愿得一心人，白首不相离。</p><p>竹竿何袅袅，鱼尾何簁簁！男儿重意气，何用钱刀为！</p><p>相传这首诗为汉代才女卓文君在得知夫君司马相如在繁华的京城产生纳妾之意所作。</p><p>诗中说，我对你的情意如同山上的雪一样洁净，如同云中的月亮一样光明。但是听说你怀有二心，我只好与你决裂。今日大概是最后的聚会，明朝便要在沟水边分手。往后我将独行于御沟边上，眼看着沟水向东流去，一去不返。那时，我大概会怀念我们的爱情，然而爱情已然如沟水一般一去不返。</p><p>那年我毅然决然离家随君而去，没有一般女孩出嫁时的悲悲戚戚。我怀着美好的向往，愿君一心一意待我，你我白首不相分离。钓鱼竿悠悠袅袅，那水中的鱼儿欢快游曳。这让我想起过往那些情投意合的幸福时光。君为男儿，当重情重义，于我，一切钱财珍宝都都是无足轻重的。</p><p>主人公是一位刚烈又柔情的女子。一方面，在得知所爱之人怀有二心时，她决定与之决裂。另一方面，她又深情款款地向他诉说着自己的感受和曾经对他的美好期许。结尾之处，她情辞热烈地告诉对方，你若重情重义，于我而言，一切功名钱财不过浮云而已。</p><p>诗中最打动人的莫过于“愿得一心人，白首不相离”这句。荡涤浮华，叩问寂寥人世，大概每一颗明净的心都会有此愿望吧。</p><p>10.凄美的忘年恋：《君生我未生》</p><p>君生我未生，我生君已老。君恨我生迟，我恨君生早。</p><p>君生我未生，我生君已老。恨不生同时，日日与君好。</p><p>我生君未生，君生我已老。我离君天涯，君隔我海角。</p><p>我生君未生，君生我已老。化蝶去寻花，夜夜栖芳草。</p><p>作者：向阳枝<br>链接：<a href="https://www.jianshu.com/p/962afaddbcf5" target="_blank" rel="noopener">https://www.jianshu.com/p/962afaddbcf5</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《雕刀》</title>
      <link href="/2020/05/25/%E3%80%8A%E5%B8%AD%E6%85%95%E5%AE%B9%E8%AF%97%E9%9B%86%E3%80%8B/"/>
      <url>/2020/05/25/%E3%80%8A%E5%B8%AD%E6%85%95%E5%AE%B9%E8%AF%97%E9%9B%86%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>《雕刀》<br>席慕容</p><p>纵然 你已去远<br>想此刻又已隔了几重山<br>我依然停顿在水流的中央<br>努力回溯 那刚刚过去的时光</p><p>想你从千里之遥奔赴到我的身边<br>原也只为了这一刻的低徊和缱绻</p><p>从云到雾到雨露 最后汇成流泉<br>也不过只是为了想要这世界知道<br>反复与坚持之后<br>柔水终成雕刀</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《我想和你一起生活》</title>
      <link href="/2020/05/24/%E3%80%8A%E6%88%91%E6%83%B3%E5%92%8C%E4%BD%A0%E4%B8%80%E8%B5%B7%E7%94%9F%E6%B4%BB%E3%80%8B/"/>
      <url>/2020/05/24/%E3%80%8A%E6%88%91%E6%83%B3%E5%92%8C%E4%BD%A0%E4%B8%80%E8%B5%B7%E7%94%9F%E6%B4%BB%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>我想和你一起生活</p><p>茨维塔耶娃</p><p>我想和你一起生活<br>在某个小镇，<br>共享无尽的黄昏<br>和绵绵不绝的钟声。<br>在这个小镇的旅店里<br>古老时钟敲出的<br>微弱响声<br>像时间轻轻滴落。<br>有时候，在黄昏，自顶楼某个房间传来笛声，<br>吹笛者倚著窗牖，<br>而窗口大朵郁金香。<br>此刻你若不爱我，我也不会在意。<br>在房间中央，一个磁砖砌成的炉子，<br>每一块磁砖上画著一幅画：<br>一颗心，一艘帆船，一朵玫瑰。<br>而自我们唯一的窗户张望，<br>雪，雪，雪。<br>你会躺成我喜欢的姿势：慵懒，<br>淡然，冷漠。<br>一两回点燃火柴的刺耳声。<br>你香烟的火苗由旺转弱，<br>烟的末梢颤抖著，颤抖著<br>短小灰白的烟蒂<br>连灰烬你都懒得弹落<br>香烟遂飞舞进火中。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《盼望》</title>
      <link href="/2020/05/23/%E3%80%8A%E7%9B%BC%E6%9C%9B%E3%80%8B/"/>
      <url>/2020/05/23/%E3%80%8A%E7%9B%BC%E6%9C%9B%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>《盼望》<br>席慕容<br>其实 我盼望的<br>也不过就只是那一瞬<br>我从没要求过 你给我<br>你的一生<br>如果能在开满了栀子花的山坡上<br>与你相遇 如果能<br>深深地爱过一次再别离<br>那么 再长久的一生<br>不也就只是 就只是<br>回首时<br>那短短的一瞬</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《泰戈尔诗选》</title>
      <link href="/2020/05/23/%E3%80%8A%E6%B3%B0%E6%88%88%E5%B0%94%E8%AF%97%E9%80%89%E3%80%8B/"/>
      <url>/2020/05/23/%E3%80%8A%E6%B3%B0%E6%88%88%E5%B0%94%E8%AF%97%E9%80%89%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>5/15 《飞鸟集》<br>    I love three things in the world.<br>    Sun, moon and you.<br>    Sun for morning,<br>    moon for night,<br>    and you forever.</p><p>5/19<br>    some day i shall sing to thee<br>    in the sunrise of some other world,<br>    I have seen thee before<br>    in the light of the earth,<br>    in the love of man.</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《朱生豪情书集》</title>
      <link href="/2020/05/22/%E3%80%8A%E6%9C%B1%E7%94%9F%E8%B1%AA%E6%83%85%E4%B9%A6%E9%9B%86%E3%80%8B/"/>
      <url>/2020/05/22/%E3%80%8A%E6%9C%B1%E7%94%9F%E8%B1%AA%E6%83%85%E4%B9%A6%E9%9B%86%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>1、醒来觉得甚是爱你。<br>2、望你的信如望命一样。<br>3、心没处安放，寂寞得难堪。<br>4、我是，我是宋清如至上主义者。<br>5、我渴望和你打架，也渴望抱抱你。<br>6、我一定要吃糖，为着寂寞的缘故<br>7、我爱你永远爱不完，愿蚊子不要叮你。<br>8、我愿意舍弃一切，以想念你终此一生。</p><a id="more"></a><p>9、幸亏世上还有一个你，你不要鄙夷我。<br>10、寄给你全宇宙的爱和自太古至永劫的思念。<br>11、如果没有你，生命对于我将是不可堪的……<br>12、我想作诗，写雨，写夜的相思，写你，写不出。<br>13、你的来信如同续命汤一样，今天我算是活转来了。<br>14、心里不痛快的时候，也真想把你抓起来打一顿才好。<br>15、心里怪无聊的，懒得做事，只想倚在你肩上听你讲话。<br>16、大半段的生命已经这样完结了，怎么还禁得起零星的磨蚀。<br>17、你说过你希望将来，因此我希望你将来能到我坟墓上看我。<br>18、要是你真比我大，那么我从今后每年长两岁，总会追及你。<br>19、如果不是因为这世界有些古怪，我巴不得永远和你厮守在一起。<br>20、我希望我现在就死，趁你还做得出诗的时候，我要你做诗吊我<br>21、今后再不说诳话欺骗自己了……我愿意懂得“永恒”两字的意义。<br>22、每天每天你让别人看见你，我却看不见你，这是全然没有理由的。<br>23、希望你快快地爱上一个人，让那个人欺负你，如同你欺负我一样。<br>24、要是世上只有我们两个人多么好，我一定要把你欺负得哭不出来。<br>25、快用两句骗小孩子的话哄哄我。一点乐趣都没有，一点希望都没有。<br>26、我们都是世上多余的人，但至少我们对于彼此都是世界最重要的人。<br>27、我实在是个坏人，但作为你的朋友的我，却确实是在努力着学做好人。<br>28、要是我们现在还不曾结婚，我一定自己也不会知道我爱你是多么的深。<br>29、但愿来生我们终日在一起，每天每天从早晨口角到夜深，恨不得大家走开。<br>30、我的快乐即是爱你，我的安慰即是思念你，你愿不愿待我好则非我所愿计及。<br>31、你的心里才是我唯一的灵魂的家，要是我不还你你了，我的灵魂将失去了和谐。<br>32、不许你再叫我先生，否则我要从字典中查出世界上最肉麻的称呼来称呼你。特此警告。<br>33、我愿把我的灵魂浸入你的灵魂里。你在我脑中的印象一天比一天美好。我说不出话来。<br>34、今天中午气得吃了三碗，肚子胀得很，放了工还要去狠狠吃东西，谁教宋清如不给信我。<br>35、你在古时候一定很笨很不可爱的，这我很能相信，因为否则我将伤心不能和你早些相识。<br>36、我只想变作个鬼来看你，我看得见你，你看不见我。总有一天，我会想你想得发痴了的。<br>37、要是我能把我的灵魂封在信封内寄给你，交给你保管着……你想不出此刻我是多少快乐。<br>38、这里一切都是丑的，风、雨、太阳都丑，人也丑，我也丑得很。只有你是青天一样可羡。<br>39、我仍然是幸福的，我永远是幸福的。世间的苦不算什么，你看我灵魂不曾有一天离开过你。<br>40、我太没有野心，也许就是这一点不好，觉得彷佛只要看见你五分钟，就可得到若干程度的满足的样子。<br>41、我不很快乐，因为你不很爱我。但所谓不很快乐者，并不等于不快乐，正如不很爱我不等于不爱我一样。<br>42、我希望像太阳照着雪人一样让我全身的机构一下子碎为粉末，播撒在太空中，每一粒粉末都含有对你的眷念。<br>43、此行使我充满了幸福感，你不要想象我又起了惆怅，即使是惆怅，也是人生稀有的福分，我将永远割舍不了你。<br>44、也许那时我到底是一个弱者，那时我一定不敢见你，但我会躲在路旁看着你，而心里想，从前我曾爱过这个人。<br>45、我把我的灵魂封在这封信里，你去旅行的时候，请把它随身带在口袋里，带它同去玩玩，但不许把它失落在路上。<br>46、我很欢喜，“不记得凝望些什么，一天继续着一天。”两句话，说得太寂寞了。但我知道，我所凝望着的只是你。<br>47、我只愿凭这灵感的相通，带给彼此以慰藉，像流星的光辉，照耀我疲惫的梦寐，永远存一个安慰，纵然在别离时。<br>48、我想要在茅亭里看雨、假山边看蚂蚁，看蝴蝶恋爱，看蜘蛛结网，看水，看船，看云，看瀑布，看宋清如甜甜地睡觉。<br>49、昨夜我曾梦着你……于是他们把我葬在坟墓里，连着坟墓把我抗到你的跟前。我可一隔着坟墓和你说话，但是看不见你。<br>50、有时我对你说的我要吃了你，那是从头到脚连衣服鞋袜一起在内整个儿的把你吞下肚里去的意思，你会不会吓得哭起来了呢？<br>51、一切兴味索然，活下去全无指望，横竖顶多也不过再有十年好活。我真不想好好儿做人，恨起来简直想把自己狠狠地糟蹋一阵。<br>52、总之你是非常好非常好的，我活了二十多岁，对于人生的探讨的结果，就只有这一句结论，其他的一切都否定了。当然我爱你。<br>53、昨夜一夜天在听着雨声中度过。要是我们两人一同在雨声里做梦，那境界是如何不通；或者一同在雨声里失眠，那也是何等有味。<br>54、不要愁老之将至，你老了一定很可爱。而且，假如你老了十岁，我当然也同样老了十岁，世界也老了十岁，上帝也老了十岁，一切都是一样。<br>55、我愿意懂得‘永恒’两字的意义，把悲壮的意义放入平凡的生活里，而做一个虔诚的人。因我是厌了易变的世事，也厌了易变的自己的心情。<br>56、说，愿不愿意看见我，一个礼拜之后……让我再做一遍西湖的梦吧，灵峰的梅花该开了哩。你一定来闸口车站接我，肯不肯？我带巧格力你吃……<br>57、像得了心爱的宝贝一样，这才接到了你的信。我愿意永远作你的孩子，要是你肯做我的母亲的话。今晚我已心安了，我许给我自己一个甜蜜的睡眠。<br>58、你想不出此刻我是多少快乐，快乐得想哭。谁比我更幸福呢？比起你来，我也是要幸福得多，因为我的朋友是一个天使，而你的朋友只是一个傻小子。<br>59、其实如果有眼睛而不能见你，那么还是让它瞎了吧，有耳朵而不能听见你的声音，那么还是让它聋了吧，多少也安静一点。只要让心不要死去，因为它还能想你。<br>60、在校里同学的一年，也不曾想到要爱你像自己生命一般，于今是这样觉得了。我并不要你也爱我，一切都出于自愿，用不到你不安，你当作我是在爱一个幻象也好。<br>61、这次是偷逃出来的，回来之后，他们问我有什么要紧事，我只回答一个神秘的微笑，心里有说不出的满足，彷佛一个小孩子干了一件有趣的mischief一样。<br>62、昨夜我从两点钟醒来后，安安静静地想着你，一直到看天发亮。今天又是汽车中颠了三个钟点，然而此刻兴奋得毫不感到疲乏，也许我的瘦是由于过度得兴奋所致。<br>63、我一天一天明白你的平凡，同时却一天一天愈更深切地爱你。你如照镜子，你不会看得见你特别好的所在，但你如走进我的心里来时，你一定能知道自己是怎样好法。<br>64、要是我死了，好友，请你亲手替我写一墓铭，因为我只爱你的那一手“孩子字”，不要写在什么碑版上，请写在你的心上，“这里安眠着一个古怪的孤独的孩子”，你肯吗……<br>65、我爱你也许并不为什么理由，虽然可以有理由，例如你聪明，你纯洁，你可爱，你是好人等，但主要的原因大概是你全然适合我的趣味。因此你仍知道我是自私的，故不用感激我。<br>66、我找到了你，便像是找到了我真的自己。如果没有你，即使我爱了一百个人，或有一百个人爱我，我的灵魂也仍将永远彷徨着。你是unique的。我将永远永远多么多么的欢喜你。<br>67、直至看见了你（真的看见了你），wellthen，我的喜乐当然是不可言说的，然而不自禁地timid起来……如果两地中我更爱常熟，那理由当然你明白，因为常熟产生了你。<br>68、不要自寻烦恼，最好，我知道你很懂得这意思。但是在必要的时候，无事可做的时候，不那样心里便是空虚的那样的时候，何不妨寻寻烦恼，跟人吵吵闹闹哭哭气气都好的，只不要让烦恼生了根。<br>69、我很奇怪人们能那样安心于生活，有的人其实情形比我更糟，然而他们能若无其事地一天一天活下去。他们能安心于无灵魂的工作，无娱乐的生活，安心于他们又难看又愚蠢庸俗的老婆，她们的肚皮老是隆起着的。<br>70、谢谢你给我一个等待。做人最好常在等待中，须是一个辽远的期望，不给你到达最后的终点，但一天比一天更接近这个目标，永远是渴望，不实现也不摧毁，每天发现新的欢喜，是鼓舞而不是完全的满足。顶好是一切希望都化为现实，在生命终了前的一秒钟中。<br>71、我不知道我们中谁将先谁而死，但无论谁先死总使我不快活，要是我先死的话，那么我将失去可宝贵的与你同在的时间之一段。要是你先死的话，那么我将独自孤零地在忆念中度着无可奈何的岁月。如果我有希望，那么我希望我们不死在同一空间，只死在同一时间。<br>72、凡未认识你以前的事，我都愿意把它们编入古代史里去。你在古时候一定是很笨很不可爱的，这我很能相信，因为否则我将伤心不能和你早些认识。我在古时候有时聪明有时笨，在第十世纪以前我很聪明，十世纪以后笨了起来，十七八世纪以后又比较聪明些，到了现代又变笨了。<br>73、我们的性格并不完全一致，但尽有互相共鸣的地方。我们的认识虽是偶然，我们的交契却并非偶然。凭良心说，我不能不承认你在我心目中十分可爱，虽我对于你并不是盲目的赞美。我们需要的是对于彼此弱点的谅解，只有能互相谅解的人，弱点才能变得并不可靠，甚至于反是可爱也说不定。<br>74、我知道寂寞是深植在我们的根性里，然而如果我的生命已因你而蒙到了祝福的话，我希望你也不要想象你是寂寞的，因为我热望在你的心中占到一个最宝贵的位置。我不愿意有一天我们彼此都只化成了一个记忆，因为记忆无论如何美妙，总是已经过去已经疏远了的。你也许会不相信，我常常想像你是多么美好多么可爱，但实际见了你面的时候，你更比我的想像美好得多可爱得多。你不能说我这是说谎，因为如果不然的话，我满可以仅仅想忆你自足，而不必那样渴望着要看见你了。<br>75、写一封信在你不过是绞去十分之一点的脑汁，用去两滴眼泪那么多的墨水，一张白白的信纸，一个和你走起路来的姿势一样方方正正的信封，费了五分钟那么宝贵的时间，贴上五分大洋吾党总理的邮票，可是却免得我食不甘味，寝不安席，无心工作，悲观厌世，一会儿恨你，一会儿体谅你，一会儿发誓不再爱你，一会儿发誓无论你怎样待我不好，我总死心眼儿爱你，一会儿在想象里把你打了一顿，一会儿在想象里让你把我打了一顿，十足地神经错乱，肉麻而且可笑。你瞧，你何必一定要我发傻劲呢？就是你要证明你自己的不好，也有别的方法，何必不写信？因此，一、二、三，快写吧。</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《抉择》</title>
      <link href="/2020/05/21/%E3%80%8A%E6%8A%89%E6%8B%A9%E3%80%8B/"/>
      <url>/2020/05/21/%E3%80%8A%E6%8A%89%E6%8B%A9%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>《抉择》<br>席慕容</p><p>假如我来世上一遭<br>只为与你相聚一次<br>只为了亿万光年里的那一刹那<br>一刹那里所有的甜蜜与悲凄<br>那么 就让一切该发生的<br>都在瞬间出现吧<br>我俯首感谢所有星球的相助<br>让我与你相遇<br>与你别离<br>完成了上帝所作的一首诗<br>然后 再缓缓地老去</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《我曾经爱过你》</title>
      <link href="/2020/05/18/%E3%80%8A%E6%88%91%E6%9B%BE%E7%BB%8F%E7%88%B1%E8%BF%87%E4%BD%A0%E3%80%8B/"/>
      <url>/2020/05/18/%E3%80%8A%E6%88%91%E6%9B%BE%E7%BB%8F%E7%88%B1%E8%BF%87%E4%BD%A0%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>我曾经爱过你<br>普希金 </p><p>爱情，也许<br>在我的心灵里还没有完全消亡，<br>但愿它不会再打扰你，<br>我也不想再使你难过悲伤。<br>我曾经默默无语、<br>毫无指望地爱过你，<br>我既忍受着羞怯，<br>又忍受着嫉妒的折磨，<br>我曾经那样真诚、<br>那样温柔地爱过你，<br>但愿上帝保佑你，<br>另一个人也会象我爱你一样。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《门前》</title>
      <link href="/2020/05/18/%E3%80%8A%E9%97%A8%E5%89%8D%E3%80%8B/"/>
      <url>/2020/05/18/%E3%80%8A%E9%97%A8%E5%89%8D%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<pre><code>《门前》 顾城</code></pre><p>我多么希望，有一个门口<br>早晨，阳光照在草上</p><p>我们站着<br>扶着自己的门扇<br>门很低，但太阳是明亮的</p><p>草在结它的种子<br>风在摇它的叶子<br>我们站着，不说话<br>就十分美好</p><p>有门，不用开开<br>是我们的，就十分美好</p><p>早晨，黑夜还要流浪<br>我们把六弦琴交给他<br>我们不走了</p><p>我们需要土地<br>需要永不毁灭的土地<br>我们要乘着它<br>度过一生</p><p>土地是粗糙的，有时狭隘<br>然而，它有历史<br>有一份天空，一份月亮<br>一份露水和早晨</p><p>我们爱土地<br>我们站着<br>用木鞋挖着泥土<br>门也晒热了<br>我们轻轻靠着，十分美好</p><p>墙后的草<br>不会再长大了<br>它只用指尖，触了触阳光</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Love》</title>
      <link href="/2020/05/18/%E3%80%8A%E7%88%B1%E3%80%8B/"/>
      <url>/2020/05/18/%E3%80%8A%E7%88%B1%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>“Love”</p><p>by Roy Croft</p><p>I love you,<br>Not only for what you are,<br>But for what I am<br>When I am with you.</p><p>I love you,<br>Not only for what<br>You have made of yourself,<br>But for what<br>You are making of me.</p><p>I love you<br>For the part of me<br>That you bring out;</p><p>I love you<br>For putting your hand<br>Into my heaped-up heart<br>And passing over<br>All the foolish, weak things<br>That you can’t help<br>Dimly seeing there,<br>And for drawing out<br>Into the light<br>All the beautiful belongings<br>That no one else had looked<br>Quite far enough to find.</p><p>*I love you because you<br>Are helping me to make<br>Of the lumber of my life<br>Not a tavern<br>But a temple;<br>Out of the works<br>Of my every day<br>Not a reproach<br>But a song.</p><p>I love you<br>Because you have done<br>More than any creed<br>Could have done<br>To make me good<br>And more than any fate<br>Could have done<br>To make me happy.<br>You have done it<br>Without a touch,<br>Without a word,<br>Without a sign.<br>You have done it<br>By being yourself.<br>Perhaps that is what<br>Being a friend means,<br>After all.</p><p>《爱》 </p><p>作者：罗伊·克里夫特　爱尔兰诗人</p><p>我爱你，<br>不光因为你的样子，<br>还因为，<br>和你在一起时，<br>我的样子。</p><p>我爱你，<br>不光因为你为我而做的事，<br>还因为，<br>为了你，<br>我能做成的事。</p><p>我爱你，<br>因为你能唤出，<br>我最真的那部分。</p><p>我爱你，<br>因为你穿越我心灵的旷野，<br>如同阳光穿透水晶般容易，<br>我的傻气，<br>我的弱点，<br>在你的目光里几乎不存在。</p><p>而我心里最美丽的地方，<br>却被你的光芒照得通亮，<br>别人都不曾费心走那么远，<br>别人都觉得寻找太麻烦，<br>所以没人发现过我的美丽，<br>所以没人到过这里。</p><p>我爱你，<br>因为你帮着我去理解，<br>那生活的不堪，<br>你没有把我，<br>当做你路上的客栈，<br>而是内心深处虔诚的圣殿；<br>对于我的工作，<br>还有我琐碎的每一天，<br>你不是去责备，<br>而是为我倾唱。</p><p>我爱你，<br>因为你给予我的，<br>远甚于任何山盟海誓，<br>都是为了我好，<br>你给予我的，<br>比任何的恩惠还要多，<br>也都是为了我的幸福。<br>你给了我这么多，<br>没有一次接触，<br>没有一句话语，<br>没有一个暗示。<br>你给了我这么多，<br>仅仅是因为你就是你。<br>也许这才是作为朋友，<br>最终的真谛。</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的名字</title>
      <link href="/2020/05/18/%E6%88%91%E7%9A%84%E5%90%8D%E5%AD%97/"/>
      <url>/2020/05/18/%E6%88%91%E7%9A%84%E5%90%8D%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<pre><code>    我的名字     普希金我的名字对你有什么意义？ 它会死去， 像大海拍击海堤， 发出的忧郁的汩汩涛声， 像密林中幽幽的夜声。 它会在纪念册的黄页上 留下暗淡的印痕， 就像用无人能懂的语言 在墓碑上刻下的花纹。 它有什么意义？ 它早已被忘记 在新的激烈的风浪里， 它不会给你的心灵 带来纯洁、温柔的回忆。 但是在你孤独、悲伤的日子， 请你悄悄地念一念我的名字， 并且说：有人在思念我， 在世间我活在一个人的心里。</code></pre>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《一剪梅·雨打梨花深闭门》</title>
      <link href="/2020/05/18/%E3%80%8A%E4%B8%80%E5%89%AA%E6%A2%85%C2%B7%E9%9B%A8%E6%89%93%E6%A2%A8%E8%8A%B1%E6%B7%B1%E9%97%AD%E9%97%A8%E3%80%8B/"/>
      <url>/2020/05/18/%E3%80%8A%E4%B8%80%E5%89%AA%E6%A2%85%C2%B7%E9%9B%A8%E6%89%93%E6%A2%A8%E8%8A%B1%E6%B7%B1%E9%97%AD%E9%97%A8%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<pre><code>一剪梅·雨打梨花深闭门    （明）唐寅</code></pre><p>雨打梨花深闭门，忘了青春，误了青春。<br>赏心乐事共谁论？花下销魂，月下销魂。<br>愁聚眉峰尽日颦，千点啼痕，万点啼痕。<br>晓看天色暮看云，行也思君，坐也思君。</p><p>因为李子梅同学温柔善良，聪明可爱，所以我很喜欢她，就这样子</p>]]></content>
      
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《我想和你虚度时光》</title>
      <link href="/2020/05/17/%E3%80%8A%E6%88%91%E6%83%B3%E5%92%8C%E4%BD%A0%E8%99%9A%E5%BA%A6%E6%97%B6%E5%85%89%E3%80%8B/"/>
      <url>/2020/05/17/%E3%80%8A%E6%88%91%E6%83%B3%E5%92%8C%E4%BD%A0%E8%99%9A%E5%BA%A6%E6%97%B6%E5%85%89%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>《我想和你虚度时光》<br>我想和你虚度时光，比如低头看鱼<br>比如把茶杯留在桌子上，离开<br>浪费它们好看的阴影</p><p>我还想连落日一起浪费，比如散步<br>一直消磨到星光满天<br>我还要浪费风起的时候<br>坐在走廊发呆，直到你眼中乌云<br>全部被吹到窗外 </p><a id="more"></a><p>我已经虚度了世界，它经过我<br>疲倦，又像从未被爱过<br>但是明天我还要这样，虚度<br>满目的花草，生活应该像它们一样美好<br>一样无意义，像被虚度的电影</p><p>那些绝望的爱和赴死<br>为我们带来短暂的沉默<br>我想和你互相浪费<br>一起虚度短的沉默，长的无意义<br>一起消磨精致而苍老的宇宙</p><p>比如靠在栏杆上，低头看水的镜子<br>直到所有被虚度的事物<br>在我们身后，长出薄薄的翅膀</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《When You Are Old》</title>
      <link href="/2020/05/16/%E3%80%8AWhen-You-Are-Old%E3%80%8B/"/>
      <url>/2020/05/16/%E3%80%8AWhen-You-Are-Old%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>When You Are Old<br>《当你老了》<br>——William Butler Yeats<br>冰心译</p><p>When you are old and grey and full of sleep,<br>当你老了，头发花白，睡意沉沉，<br>And nodding by the fire, take down this book,<br>倦坐在炉边，取下这本书来，<br>And slowly read, and dream of the soft look<br>慢慢读着，追梦当年的眼神<br>Your eyes had once, and of their shadows deep;<br>那柔美的神采与深幽的晕影。</p><a id="more"></a><p>How many loved your moments of glad grace,<br>多少人爱过你青春的片影，<br>And loved your beauty with love false or true,<br>爱过你的美貌，以虚伪或是真情，<br>But one man loved the pilgrim soul in you,<br>惟独一人爱你那朝圣者的心，<br>And loved the sorrows of your changing face;<br>爱你哀戚的脸上岁月的留痕。<br>And bending down beside the glowing bars,<br>在炉栅边，你弯下了腰，<br>Murmur, a little sadly, how love fled<br>低语着，带着浅浅的伤感，<br>And paced upon the mountains overhead<br>爱情是怎样逝去，又怎样步上群山，<br>And hid his face amid a crowd of stars.<br>怎样在繁星之间藏住了脸。</p><p>　　　　　　　　</p><p>　　　　　　　　　　　</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《诗·周南·关雎》</title>
      <link href="/2020/05/15/%E3%80%8A%E8%AF%97%C2%B7%E5%91%A8%E5%8D%97%C2%B7%E5%85%B3%E9%9B%8E%E3%80%8B/"/>
      <url>/2020/05/15/%E3%80%8A%E8%AF%97%C2%B7%E5%91%A8%E5%8D%97%C2%B7%E5%85%B3%E9%9B%8E%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>关关雎鸠，在河之洲。<br>窈窕淑女，君子好逑。<br>参差荇菜，左右流之。<br>窈窕淑女，寤寐求之。<br>求之不得，寤寐思服。<br>悠哉悠哉，辗转反侧。<br>参差荇菜，左右采之。<br>窈窕淑女，琴瑟友之。<br>参差荇菜，左右芼之。<br>窈窕淑女，钟鼓乐之。</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程</title>
      <link href="/2020/05/15/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/05/15/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>使用 C++11 编写 Linux 多线程程序</p><p><a href="https://www.ibm.com/developerworks/cn/linux/1412_zhupx_thread/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/1412_zhupx_thread/index.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《I Carry Your Heart With Me》</title>
      <link href="/2020/05/14/%E3%80%8AI-Carry-Your-Heart-With-Me%E3%80%8B/"/>
      <url>/2020/05/14/%E3%80%8AI-Carry-Your-Heart-With-Me%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>I Carry Your Heart with Me<br>        – E. E. Cummings<br>I carry your heart with me　<br>我帶著你的心<br>I carry it in my heart<br>我用我的心　裝帶著你的心<br>I am never without it<br>你的心　總與我相隨<br>anywhere I go you go, my dear;<br>不管我至何方　你就在我身旁　親愛的<br>and whatever is done by only me is your doing, my darling<br>而任何我完成的事　也同是你的成就　我的摯愛</p><a id="more"></a><p>I fear no fate for you are my fate, my sweet<br>我不恐懼命運　因為你就是我的命運　我的甜美<br>I want no world for beautiful you are my world, my true<br>我不需要世界　因為美麗的你就是我的世界　我的真實<br>and it’s you are whatever a moon has always meant and<br>whatever a sun will always sing is you<br>月亮永恆的意義是你　太陽所歌詠的亦是你<br>here is the deepest secret nobody knows<br>這裡藏著無人知曉　最深的秘密<br>here is the root of the root<br>這裡是生命之樹的根之根<br>and the bud of the bud<br>芽之芽<br>and the sky of the sky of a tree called life;<br>天空之天空;<br>which grows higher than the soul can hope or mind can hide<br>它高於靈魂所嚮往　聳於意願所隱藏<br>and this is the wonder that’s keeping the stars apart<br>這是維持星辰運作的奇蹟<br>I carry your heart<br>我帶著你的心<br>I carry it in my heart<br>我用我的心　裝帶著你的心</p>]]></content>
      
      
      <categories>
          
          <category> poem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/2020/05/12/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/2020/05/12/%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>火车站售票问题 四个窗口 卖票 线程不安全</p><p>synchronize和Lock的区别<br>Lock Java队列实现<br>synchronize 操作系统实现</p><p>数据库MySQl<br>Redis数据库<br>    1.缓存有效期<br>    2.SETNX命令<br>    3.lua脚本</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++虚函数与多态</title>
      <link href="/2020/05/02/C-%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
      <url>/2020/05/02/C-%E8%99%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="C-纯虚函数与抽象类"><a href="#C-纯虚函数与抽象类" class="headerlink" title="C++ - 纯虚函数与抽象类"></a>C++ - 纯虚函数与抽象类</h2><p><a href="https://blog.csdn.net/qq_41453285/article/details/92715943" target="_blank" rel="noopener">https://blog.csdn.net/qq_41453285/article/details/92715943</a></p><p><a href="https://www.jianshu.com/p/852e5bf33f4a" target="_blank" rel="noopener">https://www.jianshu.com/p/852e5bf33f4a</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime</title>
      <link href="/2020/05/02/sublime/"/>
      <url>/2020/05/02/sublime/</url>
      
        <content type="html"><![CDATA[<p>代码自动补全插件 TabNine<br>    command + shift + p 选择Install Packages<br>    再次command + shift + p 选择TabNine安装</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom</title>
      <link href="/2020/04/29/Atom/"/>
      <url>/2020/04/29/Atom/</url>
      
        <content type="html"><![CDATA[<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><pre><code>预览markdown shift+ctrl+m隐藏sidebar  command + k/b   view-&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nest.md</title>
      <link href="/2020/04/28/nest/"/>
      <url>/2020/04/28/nest/</url>
      
        <content type="html"><![CDATA[<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><pre><code>Conda(Linux/macOS    <figure class="highlight plain"><figcaption><span>create --name ENVNAME -c conda-forge nest-simulator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate ENVNAME</span><br></pre></td></tr></table></figure>注意python的版本    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which python</span><br><span class="line">which nest</span><br></pre></td></tr></table></figure>if something is missing, try    `conda install &lt;package&gt;`</code></pre><h2 id="NEST-Documentation"><a href="#NEST-Documentation" class="headerlink" title="NEST Documentation"></a>NEST Documentation</h2><p>NEST is a simulator for spiking neural network models</p><ol><li>Models of information processing, in the visual or auditory cortex of mammals</li><li>Models of network activity dynamics, laminar cortical networks or balanced random networks</li><li>Models of learning and plasticity.</li></ol><h2 id="MUSIC-Interface"><a href="#MUSIC-Interface" class="headerlink" title="MUSIC Interface"></a>MUSIC Interface</h2><p>A standard by the INCF, allows the transmission of data between applications at runtime</p><p>MUSIC is an API allowing large scale neuron simulators using MPI<br>internally to exchange data during runtime. </p><p>MPI : 消息传递接口（英语：Message Passing Interface，缩写MPI）是一个并行计算的应用程序接口（API），常在超级电脑、电脑集群等非共享内存环境程序设计。</p><p>MUSIC provides mechanisms to transfer massive amounts of event information and continuous values<br>from one parallel application to another.</p><p>two most important components<br>    music library : ‘libmusic.a’<br>    music utility : ‘music’</p><ul><li>Getting started</li></ul><p>MUSIC proxies are devices, not regular neuron models</p>]]></content>
      
      
      
        <tags>
            
            <tag> nest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>design_patterns</title>
      <link href="/2020/04/27/design_patterns/"/>
      <url>/2020/04/27/design_patterns/</url>
      
        <content type="html"><![CDATA[<p>目标<br>    - 理解松耦合设计思想<br>    - 掌握面向对象设计原则<br>    - 掌握重构技法改善设计<br>    - 掌握GOF核心设计模式</p><p>《设计模式 可复用面向对象软件的基础》</p><h2 id="底层思维"><a href="#底层思维" class="headerlink" title="底层思维"></a>底层思维</h2><pre><code>向下，如何把握机器底层 从微观理解对象构造* 语言构造* 编译转换* 内存模型* 运行时机制深入理解面向对象向下：深入理解三大面向对象机制* 封装， 隐藏内部实现* 继承， 复用现有代码* 多态， 改写对象行为</code></pre><h2 id="抽象思维"><a href="#抽象思维" class="headerlink" title="抽象思维"></a>抽象思维</h2><pre><code>向上，如何将我们的周围世界抽象为程序代码* 面向对象* 组件封装* 设计模式* 架构模式</code></pre><a id="more"></a><h2 id="如何解决复杂性"><a href="#如何解决复杂性" class="headerlink" title="如何解决复杂性"></a>如何解决复杂性</h2><ul><li><p>分解</p><ul><li>分而治之</li></ul></li><li><p>抽象</p><ul><li>多态</li><li>只需修改很少的代码</li></ul></li></ul><p><strong>复用</strong></p><h2 id="八大面向对象设计原则"><a href="#八大面向对象设计原则" class="headerlink" title="八大面向对象设计原则"></a>八大面向对象设计原则</h2><pre><code>* 依赖倒置原则（DIP）    隔离变化* 开放封闭原则（OCP）    对扩展开放，对更改封闭* 单一职责原则（SRP）    一个类应该仅有一个引起它变化的原因    变化的方向隐含着类的责任* Liskov替换原则（LSP）    子类必须能够替换他们的基类（is a）* 接口隔离原则（ISP）    接口应该小而完备* 优先使用对象组合（黑箱复用），而不是类继承（白箱复用）    继承在某种程度上破坏了封装性，子类父类耦合度高    而对象组合只要求被组合的对象具有良好定义的接口* 封装变化点* 针对接口编程，而不是针对实现编程    高内聚、松耦合</code></pre><p><strong>接口标准化</strong></p><h2 id="GOF-23模式分类"><a href="#GOF-23模式分类" class="headerlink" title="GOF-23模式分类"></a>GOF-23模式分类</h2><pre><code>从目的来看    * 创建型 Creational    * 结构型 Structural    * 行为型 Behavioral从范围来看    * 类模式处理类与子类的静态关系    * 对象模式处理对象间的动态关系从封装变化角度对模式分类    组件协作        现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用之间的松耦合，是二者之间协作时常用的模式                    * Template Method 模版方法            稳定 变化        * Strategy 策略模式            扩展 而不是更改源码 遵循开闭原则 if-else            定义一系列算法，把他们一个个封装起来，并且使它们可互相变化（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子类化）        * Observer/Event    单一职责        * Decorator        * Bridge    对象创建        * Factory Method        * Abstract Factory        * Prototype        * Builder    对象性能        * Singleton        * Flyweight    接口隔离        * Facade        * Proxy        * Mediator        * Adapter    状态变化        * Memento        * State    数据结构        * Composite        * Iterator        * Chain of Resposibility    行为变化        * Command        * Visitor    领域问题        * Interpreter</code></pre><p>应对变化 提高复用</p><h2 id="重构书籍推荐"><a href="#重构书籍推荐" class="headerlink" title="重构书籍推荐"></a>重构书籍推荐</h2><p>《重构–改善既有代码的设计》<br>《重构与模式》</p><p>重构关键技法<br>    静态 -&gt;动态<br>    早绑定 -&gt; 晚绑定<br>    继承 -&gt; 组合<br>    编译时依赖 -&gt; 运行时依赖<br>    紧耦合 -&gt; 松耦合</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2020/04/25/markdown/"/>
      <url>/2020/04/25/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="markdown-预览"><a href="#markdown-预览" class="headerlink" title="markdown 预览"></a>markdown 预览</h2><p><a href="https://blog.csdn.net/qq_20011607/article/details/81370236" target="_blank" rel="noopener">https://blog.csdn.net/qq_20011607/article/details/81370236</a></p><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">#### 这是五级标题</span><br><span class="line">##### 这是六级标题</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h4 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h4><h5 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h5><hr><h2 id="2-字体"><a href="#2-字体" class="headerlink" title="2.字体"></a>2.字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**加粗**</span><br><span class="line">***斜体加粗***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p><em>斜体</em><br><strong>加粗</strong><br><strong><em>斜体加粗</em></strong><br><del>这是加删除线的文字</del></p><hr><h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p></blockquote></blockquote><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p><hr><h2 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><h2 id="Vincent的银河系漫游指南"><a href="#Vincent的银河系漫游指南" class="headerlink" title="Vincent的银河系漫游指南"></a><a href="https://vincentcheungkokomo.github.io/">Vincent的银河系漫游指南</a></h2><h2 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>语法： 无序列表用-+*任何一种都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容1</span><br><span class="line">+ 列表内容2</span><br><span class="line">* 列表内容3</span><br></pre></td></tr></table></figure><ul><li>列表内容1</li></ul><ul><li>列表内容2</li></ul><ul><li>列表内容3</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表内容</span><br><span class="line">    * 二级无序列表内容1</span><br><span class="line">    * 二级无序列表内容2</span><br></pre></td></tr></table></figure><ul><li>一级无序列表内容<ul><li>二级无序列表内容1</li><li>二级无序列表内容2</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表内容</span><br><span class="line">    1. 二级有序列表内容1</span><br><span class="line">    2. 二级有序列表内容2</span><br></pre></td></tr></table></figure><ul><li>一级无序列表内容<ol><li>二级有序列表内容1</li><li>二级有序列表内容2</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 一级有序列表内容1</span><br><span class="line">    * 二级无序列表内容1</span><br><span class="line">    * 二级无序列表内容2</span><br></pre></td></tr></table></figure><ol><li>一级有序列表内容1<ul><li>二级无序列表内容1</li><li>二级无序列表内容2</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2. 一级有序列表内容2</span><br><span class="line">    1. 二级有序列表内容1</span><br><span class="line">    2. 二级有序列表内容2</span><br></pre></td></tr></table></figure><ol start="2"><li>一级有序列表内容2<ol><li>二级有序列表内容1</li><li>二级有序列表内容2</li></ol></li></ol><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法:<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;代码内容&#96;</span><br></pre></td></tr></table></figure><p><code>create database hero;</code></p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行代码</span><br><span class="line">第二行代码</span><br><span class="line">第三行代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">    echo &quot;Don&#39;t forget to be awesome!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><hr><h2 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">st&#x3D;&gt;start: Start</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;hello world&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2020/04/25/test/"/>
      <url>/2020/04/25/test/</url>
      
        <content type="html"><![CDATA[<h2 id="解决点击标签分类显示-Cannot-GET-tags-20"><a href="#解决点击标签分类显示-Cannot-GET-tags-20" class="headerlink" title="解决点击标签分类显示 Cannot GET /tags/%20/"></a>解决点击标签分类显示 Cannot GET /tags/%20/</h2><p>参考 <a href="https://www.jianshu.com/p/b671e4082c13" target="_blank" rel="noopener">https://www.jianshu.com/p/b671e4082c13</a></p><h2 id="Hexo使用NexT主题设置主页显示文章摘要方法"><a href="#Hexo使用NexT主题设置主页显示文章摘要方法" class="headerlink" title="Hexo使用NexT主题设置主页显示文章摘要方法"></a>Hexo使用NexT主题设置主页显示文章摘要方法</h2><pre><code>1. 在文章中使用&lt;!--more--&gt;进行手动截断</code></pre><h2 id="利用-Hexo-Github-Pages-搭建博客并优化-Next-主题教程"><a href="#利用-Hexo-Github-Pages-搭建博客并优化-Next-主题教程" class="headerlink" title="利用 Hexo + Github Pages 搭建博客并优化 Next 主题教程"></a>利用 Hexo + Github Pages 搭建博客并优化 Next 主题教程</h2><pre><code>https://michael728.github.io/2019/05/19/hexo-blog-full-note/</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Nest搭建个人博客</title>
      <link href="/2020/04/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2020/04/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><p>Node.js是能够在服务器端运行JavaScript 的开放源代码、跨平台 JavaScript 运行环境。</p><p>查看node版本 <code>node -v</code></p><p>查看npm包管理器版本 <code>npm -v</code></p><h2 id="2-npm安装Hexo"><a href="#2-npm安装Hexo" class="headerlink" title="2. npm安装Hexo"></a>2. npm安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="3-使用Hexo搭建博客"><a href="#3-使用Hexo搭建博客" class="headerlink" title="3. 使用Hexo搭建博客"></a>3. 使用Hexo搭建博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog/</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="4-启动博客"><a href="#4-启动博客" class="headerlink" title="4.启动博客"></a>4.启动博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s // 启动本地服务 localhost:4000 hexo默认创建了主题为hello world的文章</span><br><span class="line">$ hexo n <span class="string">"我的第一篇博客文章"</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/_posts/</span><br><span class="line">$ subl 我的第一篇博客文章.md  // 用sublime进行编辑</span><br><span class="line">$ <span class="built_in">cd</span> ../.. // 切换到myblog目录</span><br><span class="line">$ hexo clean // 清理</span><br><span class="line">$ hexo g // 生成</span><br><span class="line">$ hexo s // 启动</span><br></pre></td></tr></table></figure><h2 id="5-部署到xxx-gitHub-io"><a href="#5-部署到xxx-gitHub-io" class="headerlink" title="5. 部署到xxx.gitHub.io"></a>5. 部署到xxx.gitHub.io</h2><p>github 新建仓库</p><pre><code>Create new repository</code></pre><p>仓库名与GitHub帐号名相同</p><pre><code>repository name : username.github.io // 浏览器输入该地址可访问</code></pre><p>在blog目录下安装git部署的插件</p><p>安装<br>    hexo-deployer-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改站点配置文件 /blog/_config.yml </p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: https://github.com/username/username.github.io.git  branch: master</code></pre><p>部署到远端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"you@example.com"</span></span><br><span class="line">$ git config --global git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>更改站点配置文件 /blog/_config.yml<br>    theme: next</p><p>重新生成部署</p><pre><code>hexo cleanhexo ghexo shexo d</code></pre><p>添加评论系统<br>    <a href="https://bluelzy.com/articles/use_valine_for_your_blog.html" target="_blank" rel="noopener">https://bluelzy.com/articles/use_valine_for_your_blog.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=15921694224540162753" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=15921694224540162753</a>    </p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/23/hello-world/"/>
      <url>/2020/04/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
